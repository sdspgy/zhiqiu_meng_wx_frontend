{"version":3,"sources":["index.js","sdk/cos.js","sdk/util.js","sdk/event.js","sdk/task.js","sdk/base.js","package.json","sdk/advance.js","sdk/async.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;AGRA,AJYA,AENA,ACHA,AFMA;AGRA,AJYA,AENA,ACHA,AFMA;AGRA,AJYA,AENA,ACHA,AFMA;AIXA,ADGA,AJYA,AENA,ACHA,AFMA;AIXA,ADGA,AJYA,AENA,ACHA,AFMA;AIXA,ADGA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,AFMA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,AFMA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,AFMA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AENA,ACHA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,AJYA,AGTA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,ACHA,AHSA,ADGA,AFMA;AIXA,ACHA,AFMA,ADGA,AFMA;AIXA,ACHA,AFMA,ADGA,AFMA;AIXA,ACHA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,ADGA,AFMA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdA,AFMA,AHSA;AKdfile":"index.js","sourcesContent":["/**\r\n * 提供 npm 包引用的入口\r\n */\r\nvar COS = require('./sdk/cos');\r\nmodule.exports = COS;","\r\n\r\nvar util = require('./util');\r\nvar event = require('./event');\r\nvar task = require('./task');\r\nvar base = require('./base');\r\nvar advance = require('./advance');\r\nvar pkg = require('../package.json');\r\n\r\nvar defaultOptions = {\r\n    AppId: '', // AppId 已废弃，请拼接到 Bucket 后传入，例如：test-1250000000\r\n    SecretId: '',\r\n    SecretKey: '',\r\n    XCosSecurityToken: '', // 使用临时密钥需要注意自行刷新 Token\r\n    ChunkRetryTimes: 2,\r\n    FileParallelLimit: 3,\r\n    ChunkParallelLimit: 3,\r\n    ChunkSize: 1024 * 1024,\r\n    SliceSize: 1024 * 1024,\r\n    CopyChunkParallelLimit: 20,\r\n    CopyChunkSize: 1024 * 1024 * 10,\r\n    CopySliceSize: 1024 * 1024 * 10,\r\n    MaxPartNumber: 10000,\r\n    ProgressInterval: 1000,\r\n    UploadQueueSize: 1000,\r\n    Domain: '',\r\n    ServiceDomain: '',\r\n    Protocol: '',\r\n    CompatibilityMode: false,\r\n    ForcePathStyle: false,\r\n    UseRawKey: false,\r\n    Timeout: 0, // 单位毫秒，0 代表不设置超时时间\r\n    CorrectClockSkew: true,\r\n    SystemClockOffset: 0, // 单位毫秒，ms\r\n    UploadCheckContentMd5: false,\r\n    UploadIdCacheLimit: 500,\r\n    Proxy: '',\r\n    Ip: '',\r\n    StrictSsl: true,\r\n    KeepAlive: true,\r\n    UserAgent: '',\r\n};\r\n\r\n// 对外暴露的类\r\nvar COS = function (options) {\r\n    this.options = util.extend(util.clone(defaultOptions), options || {});\r\n    this.options.FileParallelLimit = Math.max(1, this.options.FileParallelLimit);\r\n    this.options.ChunkParallelLimit = Math.max(1, this.options.ChunkParallelLimit);\r\n    this.options.ChunkRetryTimes = Math.max(0, this.options.ChunkRetryTimes);\r\n    this.options.ChunkSize = Math.max(1024 * 1024, this.options.ChunkSize);\r\n    this.options.CopyChunkParallelLimit = Math.max(1, this.options.CopyChunkParallelLimit);\r\n    this.options.CopyChunkSize = Math.max(1024 * 1024, this.options.CopyChunkSize);\r\n    this.options.CopySliceSize = Math.max(0, this.options.CopySliceSize);\r\n    this.options.MaxPartNumber = Math.max(1024, Math.min(10000, this.options.MaxPartNumber));\r\n    this.options.Timeout = Math.max(0, this.options.Timeout);\r\n    if (this.options.AppId) {\r\n        console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g: \"test-1250000000\").');\r\n    }\r\n    event.init(this);\r\n    task.init(this);\r\n};\r\n\r\nbase.init(COS, task);\r\nadvance.init(COS, task);\r\n\r\nCOS.getAuthorization = util.getAuth;\r\nCOS.version = pkg.version;\r\n\r\nmodule.exports = COS;\r\n","\r\n\r\nvar fs = require('fs');\r\nvar crypto = require('crypto');\r\nvar ConfigStore = require('configstore');\r\nvar xml2js = require('xml2js');\r\nvar xmlParser = new xml2js.Parser({explicitArray: false, ignoreAttrs: true});\r\nvar xmlBuilder = new xml2js.Builder();\r\nvar configStore;\r\n\r\nfunction camSafeUrlEncode(str) {\r\n    return encodeURIComponent(str)\r\n        .replace(/!/g, '%21')\r\n        .replace(/'/g, '%27')\r\n        .replace(/\\(/g, '%28')\r\n        .replace(/\\)/g, '%29')\r\n        .replace(/\\*/g, '%2A');\r\n}\r\n\r\n//测试用的key后面可以去掉\r\nvar getAuth = function (opt) {\r\n    opt = opt || {};\r\n\r\n    var SecretId = opt.SecretId;\r\n    var SecretKey = opt.SecretKey;\r\n    var KeyTime = opt.KeyTime;\r\n    var method = (opt.method || opt.Method || 'get').toLowerCase();\r\n    var queryParams = clone(opt.Query || opt.params || {});\r\n    var headers = clone(opt.Headers || opt.headers || {});\r\n\r\n    var Key = opt.Key || '';\r\n    var pathname;\r\n    if (opt.UseRawKey) {\r\n        pathname = opt.Pathname || opt.pathname || '/' + Key;\r\n    } else {\r\n        pathname = opt.Pathname || opt.pathname || Key;\r\n        pathname.indexOf('/') !== 0 && (pathname = '/' + pathname);\r\n    }\r\n\r\n    if (!SecretId) return console.error('missing param SecretId');\r\n    if (!SecretKey) return console.error('missing param SecretKey');\r\n\r\n    var getObjectKeys = function (obj) {\r\n        var list = [];\r\n        for (var key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                list.push(key);\r\n            }\r\n        }\r\n        return list.sort(function (a, b) {\r\n            a = a.toLowerCase();\r\n            b = b.toLowerCase();\r\n            return a === b ? 0 : (a > b ? 1 : -1);\r\n        });\r\n    };\r\n\r\n    var obj2str = function (obj) {\r\n        var i, key, val;\r\n        var list = [];\r\n        var keyList = getObjectKeys(obj);\r\n        for (i = 0; i < keyList.length; i++) {\r\n            key = keyList[i];\r\n            val = (obj[key] === undefined || obj[key] === null) ? '' : ('' + obj[key]);\r\n            key = key.toLowerCase();\r\n            key = camSafeUrlEncode(key);\r\n            val = camSafeUrlEncode(val) || '';\r\n            list.push(key + '=' + val)\r\n        }\r\n        return list.join('&');\r\n    };\r\n\r\n    // 签名有效起止时间\r\n    var now = Math.round(getSkewTime(opt.SystemClockOffset) / 1000) - 1;\r\n    var exp = now;\r\n\r\n    var Expires = opt.Expires || opt.expires;\r\n    if (Expires === undefined) {\r\n        exp += 900; // 签名过期时间为当前 + 900s\r\n    } else {\r\n        exp += (Expires * 1) || 0;\r\n    }\r\n\r\n    // 要用到的 Authorization 参数列表\r\n    var qSignAlgorithm = 'sha1';\r\n    var qAk = SecretId;\r\n    var qSignTime = KeyTime || now + ';' + exp;\r\n    var qKeyTime = KeyTime || now + ';' + exp;\r\n    var qHeaderList = getObjectKeys(headers).join(';').toLowerCase();\r\n    var qUrlParamList = getObjectKeys(queryParams).join(';').toLowerCase();\r\n\r\n    // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\r\n    // 步骤一：计算 SignKey\r\n    var signKey = crypto.createHmac('sha1', SecretKey).update(qKeyTime).digest('hex');\r\n\r\n    // 步骤二：构成 FormatString\r\n    var formatString = [method, pathname, obj2str(queryParams), obj2str(headers), ''].join('\\n');\r\n    formatString = Buffer.from(formatString, 'utf8');\r\n\r\n    // 步骤三：计算 StringToSign\r\n    var res = crypto.createHash('sha1').update(formatString).digest('hex');\r\n    var stringToSign = ['sha1', qSignTime, res, ''].join('\\n');\r\n\r\n    // 步骤四：计算 Signature\r\n    var qSignature = crypto.createHmac('sha1', signKey).update(stringToSign).digest('hex');\r\n\r\n    // 步骤五：构造 Authorization\r\n    var authorization = [\r\n        'q-sign-algorithm=' + qSignAlgorithm,\r\n        'q-ak=' + qAk,\r\n        'q-sign-time=' + qSignTime,\r\n        'q-key-time=' + qKeyTime,\r\n        'q-header-list=' + qHeaderList,\r\n        'q-url-param-list=' + qUrlParamList,\r\n        'q-signature=' + qSignature\r\n    ].join('&');\r\n\r\n    return authorization;\r\n\r\n};\r\n\r\nvar getV4Auth = function (opt) {\r\n\r\n    if (!opt.SecretId) return console.error('missing param SecretId');\r\n    if (!opt.SecretKey) return console.error('missing param SecretKey');\r\n    if (!opt.Bucket) return console.error('missing param Bucket');\r\n\r\n    var longBucket = opt.Bucket;\r\n    var ShortBucket = longBucket.substr(0, longBucket.lastIndexOf('-'));\r\n    var AppId = longBucket.substr(longBucket.lastIndexOf('-') + 1);\r\n    var random = Math.round(Math.random() * Math.pow(2, 32));\r\n    var now = Math.round(Date.now() / 1000);\r\n    var e = now + (opt.Expires === undefined ? 900 : opt.Expires);\r\n    var path = '/' + AppId + '/' + ShortBucket + '/' + encodeURIComponent((opt.Key || '').replace(/(^\\/*)/g, '')).replace(/%2F/g, '/');\r\n    var plainText = 'a=' + AppId + '&b=' + ShortBucket + '&k=' + opt.SecretId + '&t=' + now + '&e=' + e + '&r=' + random + '&f=' + path;\r\n    var signKey = crypto.createHmac(\"sha1\", opt.SecretKey).update(plainText).digest();\r\n    var sign = Buffer.concat([signKey, Buffer.from(plainText)]).toString(\"base64\");\r\n    return sign;\r\n};\r\n\r\nvar noop = function () {\r\n\r\n};\r\n\r\n// 清除对象里值为的 undefined 或 null 的属性\r\nvar clearKey = function (obj) {\r\n    var retObj = {};\r\n    for (var key in obj) {\r\n        if (obj.hasOwnProperty(key) && obj[key] !== undefined && obj[key] !== null) {\r\n            retObj[key] = obj[key];\r\n        }\r\n    }\r\n    return retObj;\r\n};\r\n\r\n// XML 对象转 JSON 对象\r\nvar xml2json = function (bodyStr) {\r\n    var d = {};\r\n    xmlParser.parseString(bodyStr, function (err, result) {\r\n        d = result;\r\n    });\r\n\r\n    return d;\r\n};\r\n\r\n// JSON 对象转 XML 对象\r\nvar json2xml = function (json) {\r\n    var xml = xmlBuilder.buildObject(json);\r\n    return xml;\r\n};\r\n\r\n// 计算 MD5\r\nvar md5 = function (str, encoding) {\r\n    return crypto.createHash('md5').update(str).digest(encoding || 'hex');\r\n};\r\n\r\n// 获取文件 md5 值\r\nvar getFileMd5 = function (readStream, callback) {\r\n    var md5 = crypto.createHash('md5');\r\n    readStream.on('data', function (chunk) {\r\n        md5.update(chunk);\r\n    });\r\n    readStream.on('error', function (err) {\r\n        callback(err);\r\n    });\r\n    readStream.on('end', function () {\r\n        var hash = md5.digest('hex');\r\n        callback(null, hash);\r\n    });\r\n};\r\n\r\nfunction clone(obj) {\r\n    if (typeof obj === 'string') return '' + obj;\r\n    return map(obj, function (v) {\r\n        return typeof v === 'object' ? clone(v) : v;\r\n    });\r\n}\r\n\r\nfunction extend(target, source) {\r\n    each(source, function (val, key) {\r\n        target[key] = source[key];\r\n    });\r\n    return target;\r\n}\r\n\r\nfunction isArray(arr) {\r\n    return arr instanceof Array;\r\n}\r\n\r\nfunction isInArray(arr, item) {\r\n    var flag = false;\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (item === arr[i]) {\r\n            flag = true;\r\n            break;\r\n        }\r\n    }\r\n    return flag;\r\n}\r\n\r\nfunction makeArray(arr) {\r\n    return isArray(arr) ? arr : [arr];\r\n}\r\n\r\nfunction each(obj, fn) {\r\n    for (var i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            fn(obj[i], i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction map(obj, fn) {\r\n    var o = isArray(obj) ? [] : {};\r\n    for (var i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            o[i] = fn(obj[i], i);\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\nfunction filter(obj, fn) {\r\n    var iaArr = isArray(obj);\r\n    var o = iaArr ? [] : {};\r\n    for (var i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            if (fn(obj[i], i)) {\r\n                if (iaArr) {\r\n                    o.push(obj[i]);\r\n                } else {\r\n                    o[i] = obj[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\nvar binaryBase64 = function (str) {\r\n    var i, len, char, arr = [];\r\n    for (i = 0, len = str.length / 2; i < len; i++) {\r\n        char = parseInt(str[i * 2] + str[i * 2 + 1], 16);\r\n        arr.push(char);\r\n    }\r\n    return Buffer.from(arr).toString('base64');\r\n};\r\nvar uuid = function () {\r\n    var S4 = function () {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\r\n};\r\n\r\nvar hasMissingParams = function (apiName, params) {\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    if (apiName.indexOf('Bucket') > -1 || apiName === 'deleteMultipleObject' || apiName === 'multipartList' || apiName === 'listObjectVersions') {\r\n        if (!Bucket) return 'Bucket';\r\n        if (!Region) return 'Region';\r\n    } else if (apiName.indexOf('Object') > -1 || apiName.indexOf('multipart') > -1 || apiName === 'sliceUploadFile' || apiName === 'abortUploadTask') {\r\n        if (!Bucket) return 'Bucket';\r\n        if (!Region) return 'Region';\r\n        if (!Key) return 'Key';\r\n    }\r\n    return false;\r\n};\r\n\r\nvar formatParams = function (apiName, params) {\r\n\r\n    // 复制参数对象\r\n    params = extend({}, params);\r\n\r\n    // 统一处理 Headers\r\n    if (apiName !== 'getAuth' && apiName !== 'getV4Auth' && apiName !== 'getObjectUrl') {\r\n        var Headers = params.Headers || {};\r\n        if (params && typeof params === 'object') {\r\n            (function () {\r\n                for (var key in params) {\r\n                    if (params.hasOwnProperty(key) && key.indexOf('x-cos-') > -1) {\r\n                        Headers[key] = params[key];\r\n                    }\r\n                }\r\n            })();\r\n\r\n            var headerMap = {\r\n                // params headers\r\n                'x-cos-mfa': 'MFA',\r\n                'Content-MD5': 'ContentMD5',\r\n                'Content-Length': 'ContentLength',\r\n                'Content-Type': 'ContentType',\r\n                'Expect': 'Expect',\r\n                'Expires': 'Expires',\r\n                'Cache-Control': 'CacheControl',\r\n                'Content-Disposition': 'ContentDisposition',\r\n                'Content-Encoding': 'ContentEncoding',\r\n                'Range': 'Range',\r\n                'If-Modified-Since': 'IfModifiedSince',\r\n                'If-Unmodified-Since': 'IfUnmodifiedSince',\r\n                'If-Match': 'IfMatch',\r\n                'If-None-Match': 'IfNoneMatch',\r\n                'x-cos-copy-source': 'CopySource',\r\n                'x-cos-copy-source-Range': 'CopySourceRange',\r\n                'x-cos-metadata-directive': 'MetadataDirective',\r\n                'x-cos-copy-source-If-Modified-Since': 'CopySourceIfModifiedSince',\r\n                'x-cos-copy-source-If-Unmodified-Since': 'CopySourceIfUnmodifiedSince',\r\n                'x-cos-copy-source-If-Match': 'CopySourceIfMatch',\r\n                'x-cos-copy-source-If-None-Match': 'CopySourceIfNoneMatch',\r\n                'x-cos-acl': 'ACL',\r\n                'x-cos-grant-read': 'GrantRead',\r\n                'x-cos-grant-write': 'GrantWrite',\r\n                'x-cos-grant-full-control': 'GrantFullControl',\r\n                'x-cos-grant-read-acp': 'GrantReadAcp',\r\n                'x-cos-grant-write-acp': 'GrantWriteAcp',\r\n                'x-cos-storage-class': 'StorageClass',\r\n                // SSE-C\r\n                'x-cos-server-side-encryption-customer-algorithm': 'SSECustomerAlgorithm',\r\n                'x-cos-server-side-encryption-customer-key': 'SSECustomerKey',\r\n                'x-cos-server-side-encryption-customer-key-MD5': 'SSECustomerKeyMD5',\r\n                // SSE-COS、SSE-KMS\r\n                'x-cos-server-side-encryption': 'ServerSideEncryption',\r\n                'x-cos-server-side-encryption-cos-kms-key-id': 'SSEKMSKeyId',\r\n                'x-cos-server-side-encryption-context': 'SSEContext',\r\n            };\r\n            util.each(headerMap, function (paramKey, headerKey) {\r\n                if (params[paramKey] !== undefined) {\r\n                    Headers[headerKey] = params[paramKey];\r\n                }\r\n            });\r\n\r\n            params.Headers = clearKey(Headers);\r\n        }\r\n    }\r\n\r\n    return params;\r\n};\r\n\r\nvar apiWrapper = function (apiName, apiFn) {\r\n    return function (params, callback) {\r\n\r\n        // 处理参数\r\n        if (typeof params === 'function') {\r\n            callback = params;\r\n            params = {};\r\n        }\r\n\r\n        // 整理参数格式\r\n        params = formatParams(apiName, params);\r\n\r\n        // 代理回调函数\r\n        var formatResult = function (result) {\r\n            if (result && result.headers) {\r\n                result.headers['x-cos-version-id'] && (result.VersionId = result.headers['x-cos-version-id']);\r\n                result.headers['x-cos-delete-marker'] && (result.DeleteMarker = result.headers['x-cos-delete-marker']);\r\n            }\r\n            return result;\r\n        };\r\n        var _callback = function (err, data) {\r\n            callback && callback(formatResult(err), formatResult(data));\r\n        };\r\n\r\n        if (apiName !== 'getService' && apiName !== 'abortUploadTask') {\r\n            // 判断参数是否完整\r\n            var missingResult;\r\n            if (missingResult = hasMissingParams(apiName, params)) {\r\n                _callback({error: 'missing param ' + missingResult});\r\n                return;\r\n            }\r\n            // 判断 region 格式\r\n            if (params.Region) {\r\n                if (params.Region.indexOf('cos.') > -1) {\r\n                    _callback({error: 'param Region should not be start with \"cos.\"'});\r\n                    return;\r\n                } else if (!/^([a-z\\d-]+)$/.test(params.Region)) {\r\n                    _callback({error: 'Region format error.'});\r\n                    return;\r\n                }\r\n                // 判断 region 格式\r\n                if (!this.options.CompatibilityMode && params.Region.indexOf('-') === -1 && params.Region !== 'yfb' && params.Region !== 'default') {\r\n                    console.warn('warning: param Region format error, find help here: https://cloud.tencent.com/document/product/436/6224');\r\n                }\r\n            }\r\n            // 兼容不带 AppId 的 Bucket\r\n            if (params.Bucket) {\r\n                if (!/^([a-z\\d-]+)-(\\d+)$/.test(params.Bucket)) {\r\n                    if (params.AppId) {\r\n                        params.Bucket = params.Bucket + '-' + params.AppId;\r\n                    } else if (this.options.AppId) {\r\n                        params.Bucket = params.Bucket + '-' + this.options.AppId;\r\n                    } else {\r\n                        _callback({error: 'Bucket should format as \"test-1250000000\".'});\r\n                        return;\r\n                    }\r\n                }\r\n                if (params.AppId) {\r\n                    console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g Bucket:\"test-1250000000\" ).');\r\n                    delete params.AppId;\r\n                }\r\n            }\r\n            // 如果 Key 是 / 开头，强制去掉第一个 /\r\n            if (!this.options.UseRawKey && params.Key && params.Key.substr(0, 1) === '/') {\r\n                params.Key = params.Key.substr(1);\r\n            }\r\n        }\r\n        var res = apiFn.call(this, params, _callback);\r\n        if (apiName === 'getAuth' || apiName === 'getV4Auth' || apiName === 'getObjectUrl') {\r\n            return res;\r\n        }\r\n    }\r\n};\r\n\r\nvar throttleOnProgress = function (total, onProgress) {\r\n    var self = this;\r\n    var size0 = 0;\r\n    var size1 = 0;\r\n    var time0 = Date.now();\r\n    var time1;\r\n    var timer;\r\n\r\n    function update() {\r\n        timer = 0;\r\n        if (onProgress && (typeof onProgress === 'function')) {\r\n            time1 = Date.now();\r\n            var speed = Math.max(0, Math.round((size1 - size0) / ((time1 - time0) / 1000) * 100) / 100);\r\n            var percent;\r\n            if (size1 === 0 && total === 0) {\r\n                percent = 1;\r\n            } else {\r\n                percent = Math.round(size1 / total * 100) / 100 || 0;\r\n            }\r\n            time0 = time1;\r\n            size0 = size1;\r\n            try {\r\n                onProgress({loaded: size1, total: total, speed: speed, percent: percent});\r\n            } catch (e) {\r\n            }\r\n        }\r\n    }\r\n\r\n    return function (info, immediately) {\r\n        if (info) {\r\n            size1 = info.loaded;\r\n            total = info.total;\r\n        }\r\n        if (immediately) {\r\n            clearTimeout(timer);\r\n            update();\r\n        } else {\r\n            if (timer) return;\r\n            timer = setTimeout(update, self.options.ProgressInterval);\r\n        }\r\n    };\r\n};\r\n\r\nvar getFileSize = function (api, params, callback) {\r\n    var size;\r\n    if (api === 'sliceUploadFile') {\r\n        if (params.FilePath) {\r\n            fs.stat(params.FilePath, function (err, fileStats) {\r\n                if (err) {\r\n                    if (params.ContentLength !== undefined) {\r\n                        size = params.ContentLength;\r\n                    } else {\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    params.FileStat = fileStats;\r\n                    params.FileStat.FilePath = params.FilePath;\r\n                    size = fileStats.isDirectory() ? 0 : fileStats.size;\r\n                }\r\n                params.ContentLength = size = size || 0;\r\n                callback(null, size);\r\n            });\r\n            return;\r\n        } else {\r\n            callback({error: 'missing param FilePath'});\r\n            return;\r\n        }\r\n    } else {\r\n        if (params.Body !== undefined) {\r\n            if (typeof params.Body === 'string') {\r\n                params.Body = global.Buffer.from(params.Body);\r\n            }\r\n            if (params.Body instanceof global.Buffer) {\r\n                size = params.Body.length;\r\n            } else if (typeof params.Body.pipe === 'function') {\r\n                if (params.ContentLength === undefined) {\r\n                    size = undefined;\r\n                } else {\r\n                    size = params.ContentLength;\r\n                }\r\n            } else {\r\n                callback({error: 'params Body format error, Only allow Buffer|Stream|String.'});\r\n                return;\r\n            }\r\n        } else {\r\n            callback({error: 'missing param Body'});\r\n            return;\r\n        }\r\n    }\r\n    params.ContentLength = size;\r\n    callback(null, size);\r\n};\r\n\r\nvar getSkewTime = function (offset) {\r\n    return Date.now() + (offset || 0);\r\n};\r\n\r\nvar util = {\r\n    noop: noop,\r\n    formatParams: formatParams,\r\n    apiWrapper: apiWrapper,\r\n    xml2json: xml2json,\r\n    json2xml: json2xml,\r\n    md5: md5,\r\n    clearKey: clearKey,\r\n    getFileMd5: getFileMd5,\r\n    binaryBase64: binaryBase64,\r\n    extend: extend,\r\n    isArray: isArray,\r\n    isInArray: isInArray,\r\n    makeArray: makeArray,\r\n    each: each,\r\n    map: map,\r\n    filter: filter,\r\n    clone: clone,\r\n    uuid: uuid,\r\n    camSafeUrlEncode: camSafeUrlEncode,\r\n    throttleOnProgress: throttleOnProgress,\r\n    getFileSize: getFileSize,\r\n    getSkewTime: getSkewTime,\r\n    getAuth: getAuth,\r\n    getV4Auth: getV4Auth,\r\n    isBrowser: false,\r\n};\r\n\r\n(function () {\r\n    try {\r\n        configStore = new ConfigStore('cos-nodejs-sdk-v5-storage');\r\n    } catch (e) {\r\n    }\r\n    var map = {};\r\n    var update = function (key, val) {\r\n        if (map.hasOwnProperty(key)) {\r\n            map[key] = val;\r\n        } else {\r\n            map[key] = val;\r\n            setTimeout(function () {\r\n                if (!configStore) return;\r\n                if (map[key] === undefined) {\r\n                    configStore.delete(key);\r\n                } else {\r\n                    configStore.set(key, map[key]);\r\n                }\r\n                delete map[key];\r\n            }, 300);\r\n        }\r\n    };\r\n    util.localStorage = {\r\n        getItem: function (key) {\r\n            return configStore && configStore.get(key);\r\n        },\r\n        setItem: update,\r\n        removeItem: update,\r\n    };\r\n})();\r\nutil.fileSlice = function (FilePath, start, end, callback) {\r\n    if (FilePath) {\r\n        var readStream = fs.createReadStream(FilePath, {start: start, end: end - 1});\r\n        readStream.isSdkCreated = true;\r\n        callback(readStream);\r\n    } else {\r\n        callback(null);\r\n    }\r\n};\r\nutil.getFileUUID = function (FileStat, ChunkSize) {\r\n    if (FileStat && FileStat.FilePath && FileStat.size && FileStat.ctime && FileStat.mtime && ChunkSize) {\r\n        return util.md5([FileStat.FilePath].join('::')) + '-' + util.md5([FileStat.size, FileStat.ctime, FileStat.mtime, ChunkSize].join('::'));\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\nutil.getBodyMd5 = function (UploadCheckContentMd5, Body, callback) {\r\n    callback = callback || noop;\r\n    if (UploadCheckContentMd5) {\r\n        if (Body instanceof Buffer || typeof Body === 'string') {\r\n            callback(util.md5(Body));\r\n        } else {\r\n            callback();\r\n        }\r\n    } else {\r\n        callback();\r\n    }\r\n};\r\n\r\nmodule.exports = util;\r\n","var initEvent = function (cos) {\r\n    var listeners = {};\r\n    var getList = function (action) {\r\n        !listeners[action] && (listeners[action] = []);\r\n        return listeners[action];\r\n    };\r\n    cos.on = function (action, callback) {\r\n        if (action === 'task-list-update') {\r\n            console.warn('warning: Event \"' + action + '\" has been deprecated. Please use \"list-update\" instead.');\r\n        }\r\n        getList(action).push(callback);\r\n    };\r\n    cos.off = function (action, callback) {\r\n        var list = getList(action);\r\n        for (var i = list.length - 1; i >= 0; i--) {\r\n            callback === list[i] && list.splice(i, 1);\r\n        }\r\n    };\r\n    cos.emit = function (action, data) {\r\n        var list = getList(action).map(function (cb) {\r\n            return cb;\r\n        });\r\n        for (var i = 0; i < list.length; i++) {\r\n            list[i](data);\r\n        }\r\n    };\r\n};\r\n\r\nvar EventProxy = function () {\r\n    initEvent(this);\r\n};\r\n\r\nmodule.exports.init = initEvent;\r\nmodule.exports.EventProxy = EventProxy;","var util = require('./util');\r\n\r\nvar originApiMap = {};\r\nvar transferToTaskMethod = function (apiMap, apiName) {\r\n    originApiMap[apiName] = apiMap[apiName];\r\n    apiMap[apiName] = function (params, callback) {\r\n        if (params.SkipTask) {\r\n            originApiMap[apiName].call(this, params, callback);\r\n        } else {\r\n            this._addTask(apiName, params, callback);\r\n        }\r\n    };\r\n};\r\n\r\nvar initTask = function (cos) {\r\n\r\n    var queue = [];\r\n    var tasks = {};\r\n    var uploadingFileCount = 0;\r\n    var nextUploadIndex = 0;\r\n\r\n    // 接口返回简略的任务信息\r\n    var formatTask = function (task) {\r\n        var t = {\r\n            id: task.id,\r\n            Bucket: task.Bucket,\r\n            Region: task.Region,\r\n            Key: task.Key,\r\n            FilePath: task.FilePath,\r\n            state: task.state,\r\n            loaded: task.loaded,\r\n            size: task.size,\r\n            speed: task.speed,\r\n            percent: task.percent,\r\n            hashPercent: task.hashPercent,\r\n            error: task.error,\r\n        };\r\n        if (task.FilePath) t.FilePath = task.FilePath;\r\n        return t;\r\n    };\r\n\r\n    var emitListUpdate = (function () {\r\n        var timer;\r\n        var emit = function () {\r\n            timer = 0;\r\n            cos.emit('task-list-update', {list: util.map(queue, formatTask)});\r\n            cos.emit('list-update', {list: util.map(queue, formatTask)});\r\n        };\r\n        return function () {\r\n            if (!timer) timer = setTimeout(emit);\r\n        }\r\n    })();\r\n\r\n    var clearQueue = function () {\r\n        if (queue.length <= cos.options.UploadQueueSize) return;\r\n        for (var i = 0;\r\n             i < nextUploadIndex && // 小于当前操作的 index 才清理\r\n             i < queue.length && // 大于队列才清理\r\n             queue.length > cos.options.UploadQueueSize // 如果还太多，才继续清理\r\n            ;) {\r\n            var isActive = queue[i].state === 'waiting' || queue[i].state === 'checking' || queue[i].state === 'uploading';\r\n            if (!queue[i] || !isActive) {\r\n                tasks[queue[i].id] && (delete tasks[queue[i].id]);\r\n                queue.splice(i, 1);\r\n                nextUploadIndex--;\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n        emitListUpdate();\r\n    };\r\n\r\n    var startNextTask = function () {\r\n        // 检查是否允许增加执行进程\r\n        if (uploadingFileCount >= cos.options.FileParallelLimit) return;\r\n        // 跳过不可执行的任务\r\n        while (queue[nextUploadIndex] && queue[nextUploadIndex].state !== 'waiting') nextUploadIndex++;\r\n        // 检查是否已遍历结束\r\n        if (nextUploadIndex >= queue.length) return;\r\n        // 上传该遍历到的任务\r\n        var task = queue[nextUploadIndex];\r\n        nextUploadIndex++;\r\n        uploadingFileCount++;\r\n        task.state = 'checking';\r\n        task.params.onTaskStart && task.params.onTaskStart(formatTask(task));\r\n        !task.params.UploadData && (task.params.UploadData = {});\r\n        var apiParams = util.formatParams(task.api, task.params);\r\n        originApiMap[task.api].call(cos, apiParams, function (err, data) {\r\n            if (!cos._isRunningTask(task.id)) return;\r\n            if (task.state === 'checking' || task.state === 'uploading') {\r\n                task.state = err ? 'error' : 'success';\r\n                err && (task.error = err);\r\n                uploadingFileCount--;\r\n                emitListUpdate();\r\n                startNextTask();\r\n                task.callback && task.callback(err, data);\r\n                if (task.state === 'success') {\r\n                    if (task.params) {\r\n                        delete task.params.UploadData;\r\n                        delete task.params.Body;\r\n                        delete task.params;\r\n                    }\r\n                    delete task.callback;\r\n                }\r\n            }\r\n            clearQueue();\r\n        });\r\n        emitListUpdate();\r\n        // 异步执行下一个任务\r\n        setTimeout(startNextTask);\r\n    };\r\n\r\n    var killTask = function (id, switchToState) {\r\n        var task = tasks[id];\r\n        if (!task) return;\r\n        var waiting = task && task.state === 'waiting';\r\n        var running = task && (task.state === 'checking' || task.state === 'uploading');\r\n        if (switchToState === 'canceled' && task.state !== 'canceled' ||\r\n            switchToState === 'paused' && waiting ||\r\n            switchToState === 'paused' && running) {\r\n            if (switchToState === 'paused' && task.params.Body && typeof task.params.Body.pipe === 'function') {\r\n                console.error('stream not support pause');\r\n                return;\r\n            }\r\n            task.state = switchToState;\r\n            cos.emit('inner-kill-task', {TaskId: id, toState: switchToState});\r\n            emitListUpdate();\r\n            if (running) {\r\n                uploadingFileCount--;\r\n                startNextTask();\r\n            }\r\n            if (switchToState === 'canceled') {\r\n                if (task.params) {\r\n                    delete task.params.UploadData;\r\n                    delete task.params.Body;\r\n                    delete task.params;\r\n                }\r\n                delete task.callback;\r\n            }\r\n        }\r\n        clearQueue();\r\n    };\r\n\r\n    cos._addTasks = function (taskList) {\r\n        util.each(taskList, function (task) {\r\n            cos._addTask(task.api, task.params, task.callback, true);\r\n        });\r\n        emitListUpdate();\r\n    };\r\n\r\n    var isTaskReadyWarning = true;\r\n    cos._addTask = function (api, params, callback, ignoreAddEvent) {\r\n\r\n        // 复制参数对象\r\n        params = util.formatParams(api, params);\r\n\r\n        // 生成 id\r\n        var id = util.uuid();\r\n        params.TaskId = id;\r\n        params.onTaskReady && params.onTaskReady(id);\r\n        if (params.TaskReady) {\r\n            params.TaskReady(id);\r\n            isTaskReadyWarning && console.warn('warning: Param \"TaskReady\" has been deprecated. Please use \"onTaskReady\" instead.');\r\n            isTaskReadyWarning = false;\r\n        }\r\n\r\n        var task = {\r\n            // env\r\n            params: params,\r\n            callback: callback,\r\n            api: api,\r\n            index: queue.length,\r\n            // task\r\n            id: id,\r\n            Bucket: params.Bucket,\r\n            Region: params.Region,\r\n            Key: params.Key,\r\n            FilePath: params.FilePath || '',\r\n            state: 'waiting',\r\n            loaded: 0,\r\n            size: 0,\r\n            speed: 0,\r\n            percent: 0,\r\n            hashPercent: 0,\r\n            error: null,\r\n        };\r\n        var onHashProgress = params.onHashProgress;\r\n        params.onHashProgress = function (info) {\r\n            if (!cos._isRunningTask(task.id)) return;\r\n            task.hashPercent = info.percent;\r\n            onHashProgress && onHashProgress(info);\r\n            emitListUpdate();\r\n        };\r\n        var onProgress = params.onProgress;\r\n        params.onProgress = function (info) {\r\n            if (!cos._isRunningTask(task.id)) return;\r\n            task.state === 'checking' && (task.state = 'uploading');\r\n            task.loaded = info.loaded;\r\n            task.speed = info.speed;\r\n            task.percent = info.percent;\r\n            onProgress && onProgress(info);\r\n            emitListUpdate();\r\n        };\r\n\r\n        // 异步获取 filesize\r\n        util.getFileSize(api, params, function (err, size) {\r\n            // 开始处理上传\r\n            if (err) { // 如果获取大小出错，不加入队列\r\n                callback(err);\r\n                return;\r\n            }\r\n            // 获取完文件大小再把任务加入队列\r\n            tasks[id] = task;\r\n            queue.push(task);\r\n            task.size = size;\r\n            !ignoreAddEvent && emitListUpdate();\r\n            startNextTask();\r\n            clearQueue();\r\n        });\r\n        return id;\r\n    };\r\n    cos._isRunningTask = function (id) {\r\n        var task = tasks[id];\r\n        return !!(task && (task.state === 'checking' || task.state === 'uploading'));\r\n    };\r\n    cos.getTaskList = function () {\r\n        return util.map(queue, formatTask);\r\n    };\r\n    cos.cancelTask = function (id) {\r\n        killTask(id, 'canceled');\r\n    };\r\n    cos.pauseTask = function (id) {\r\n        killTask(id, 'paused');\r\n    };\r\n    cos.restartTask = function (id) {\r\n        var task = tasks[id];\r\n        if (task && (task.state === 'paused' || task.state === 'error')) {\r\n            task.state = 'waiting';\r\n            emitListUpdate();\r\n            nextUploadIndex = Math.min(nextUploadIndex, task.index);\r\n            startNextTask();\r\n        }\r\n    };\r\n    cos.isUploadRunning = function () {\r\n        return uploadingFileCount || nextUploadIndex < queue.length;\r\n    };\r\n\r\n};\r\n\r\nmodule.exports.transferToTaskMethod = transferToTaskMethod;\r\nmodule.exports.init = initTask;\r\n","var pkg = require('../package.json');\r\nvar REQUEST = require('request');\r\nvar mime = require('mime-types');\r\nvar util = require('./util');\r\nvar fs = require('fs');\r\n\r\n\r\n// Bucket 相关\r\n\r\n/**\r\n * 获取用户的 bucket 列表\r\n * @param  {Object}  params         回调函数，必须，下面为参数列表\r\n * 无特殊参数\r\n * @param  {Function}  callback     回调函数，必须\r\n */\r\nfunction getService(params, callback) {\r\n\r\n    if (typeof params === 'function') {\r\n        callback = params;\r\n        params = {};\r\n    }\r\n    var protocol = this.options.Protocol || (util.isBrowser && location.protocol === 'http:' ? 'http:' : 'https:');\r\n    var domain = this.options.ServiceDomain;\r\n    var appId = params.AppId || this.options.appId;\r\n    var region = params.Region;\r\n    if (domain) {\r\n        domain = domain.replace(/\\{\\{AppId\\}\\}/ig, appId || '')\r\n        .replace(/\\{\\{Region\\}\\}/ig, region || '').replace(/\\{\\{.*?\\}\\}/ig, '');\r\n        if (!/^[a-zA-Z]+:\\/\\//.test(domain)) {\r\n            domain = protocol + '//' + domain;\r\n        }\r\n        if (domain.slice(-1) === '/') {\r\n            domain = domain.slice(0, -1);\r\n        }\r\n    } else if(region){\r\n        domain = protocol + '//cos.'+ region + '.myqcloud.com';\r\n    } else {\r\n        domain = protocol + '//service.cos.myqcloud.com';\r\n    }\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetService',\r\n        url: domain,\r\n        method: 'GET',\r\n        headers: params.Headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var buckets = (data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Buckets\r\n            && data.ListAllMyBucketsResult.Buckets.Bucket) || [];\r\n        buckets = util.isArray(buckets) ? buckets : [buckets];\r\n        var owner = (data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Owner) || {};\r\n        callback(null, {\r\n            Buckets: buckets,\r\n            Owner: owner,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 创建 Bucket，并初始化访问权限\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须\r\n *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=\" \",uin=\" \"，非必须\r\n *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=\" \",uin=\" \"，非必须\r\n *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=\" \",uin=\" \"，非必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          返回的数据\r\n *     @return  {String}  data.Location             操作地址\r\n */\r\nfunction putBucket(params, callback) {\r\n\r\n    var self = this;\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucket',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var url = getUrl({\r\n            protocol: self.options.Protocol,\r\n            domain: self.options.Domain,\r\n            bucket: params.Bucket,\r\n            region: params.Region,\r\n            isLocation: true,\r\n        });\r\n        callback(null, {\r\n            Location: url,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 查看是否存在该Bucket，是否有权限访问\r\n * @param  {Object}  params                     参数对象，必须\r\n *     @param  {String}  params.Bucket          Bucket名称，必须\r\n *     @param  {String}  params.Region          地域名称，必须\r\n * @param  {Function}  callback                 回调函数，必须\r\n * @return  {Object}  err                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                      返回的数据\r\n *     @return  {Boolean}  data.BucketExist     Bucket是否存在\r\n *     @return  {Boolean}  data.BucketAuth      是否有 Bucket 的访问权限\r\n */\r\nfunction headBucket(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:HeadBucket',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        method: 'HEAD',\r\n    }, function (err, data) {\r\n        callback(err, data);\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 下的 object 列表\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n *     @param  {String}  params.Prefix              前缀匹配，用来规定返回的文件前缀地址，非必须\r\n *     @param  {String}  params.Delimiter           定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，非必须\r\n *     @param  {String}  params.Marker              默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须\r\n *     @param  {String}  params.MaxKeys             单次返回最大的条目数量，默认1000，非必须\r\n *     @param  {String}  params.EncodingType        规定返回值的编码方式，非必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          返回的数据\r\n *     @return  {Object}  data.ListBucketResult     返回的 object 列表信息\r\n */\r\nfunction getBucket(params, callback) {\r\n    var reqParams = {};\r\n    reqParams['prefix'] = params['Prefix'] || '';\r\n    reqParams['delimiter'] = params['Delimiter'];\r\n    reqParams['marker'] = params['Marker'];\r\n    reqParams['max-keys'] = params['MaxKeys'];\r\n    reqParams['encoding-type'] = params['EncodingType'];\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucket',\r\n        ResourceKey: reqParams['prefix'],\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        qs: reqParams,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var ListBucketResult = data.ListBucketResult || {};\r\n        var Contents = ListBucketResult.Contents || [];\r\n        var CommonPrefixes = ListBucketResult.CommonPrefixes || [];\r\n\r\n        Contents = util.isArray(Contents) ? Contents : [Contents];\r\n        CommonPrefixes = util.isArray(CommonPrefixes) ? CommonPrefixes : [CommonPrefixes];\r\n\r\n        var result = util.clone(ListBucketResult);\r\n        util.extend(result, {\r\n            Contents: Contents,\r\n            CommonPrefixes: CommonPrefixes,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\n/**\r\n * 删除 Bucket\r\n * @param  {Object}  params                 参数对象，必须\r\n *     @param  {String}  params.Bucket      Bucket名称，必须\r\n *     @param  {String}  params.Region      地域名称，必须\r\n * @param  {Function}  callback             回调函数，必须\r\n * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                  返回的数据\r\n *     @return  {String}  data.Location     操作地址\r\n */\r\nfunction deleteBucket(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteBucket',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        method: 'DELETE',\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 设置 Bucket 的 权限列表\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须\r\n *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=\" \",uin=\" \"，非必须\r\n *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=\" \",uin=\" \"，非必须\r\n *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=\" \",uin=\" \"，非必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          返回的数据\r\n */\r\nfunction putBucketAcl(params, callback) {\r\n    var headers = params.Headers;\r\n\r\n    var xml = '';\r\n    if (params['AccessControlPolicy']) {\r\n        var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});\r\n        var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;\r\n        Grants = util.isArray(Grants) ? Grants : [Grants];\r\n        delete AccessControlPolicy.Grant;\r\n        delete AccessControlPolicy.Grants;\r\n        AccessControlPolicy.AccessControlList = {Grant: Grants};\r\n        xml = util.json2xml({AccessControlPolicy: AccessControlPolicy});\r\n\r\n        headers['Content-Type'] = 'application/xml';\r\n        headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n    }\r\n\r\n    // Grant Header 去重\r\n    util.each(headers, function (val, key) {\r\n        if (key.indexOf('x-cos-grant-') === 0) {\r\n            headers[key] = uniqGrant(headers[key]);\r\n        }\r\n    });\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketACL',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: headers,\r\n        action: 'acl',\r\n        body: xml,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 的 权限列表\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          返回的数据\r\n *     @return  {Object}  data.AccessControlPolicy  访问权限信息\r\n */\r\nfunction getBucketAcl(params, callback) {\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketACL',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'acl',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var AccessControlPolicy = data.AccessControlPolicy || {};\r\n        var Owner = AccessControlPolicy.Owner || {};\r\n        var Grant = AccessControlPolicy.AccessControlList.Grant || [];\r\n        Grant = util.isArray(Grant) ? Grant : [Grant];\r\n        var result = decodeAcl(AccessControlPolicy);\r\n        if (data.headers && data.headers['x-cos-acl']) {\r\n            result.ACL = data.headers['x-cos-acl'];\r\n        }\r\n        result = util.extend(result, {\r\n            Owner: Owner,\r\n            Grants: Grant,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\n/**\r\n * 设置 Bucket 的 跨域设置\r\n * @param  {Object}  params                             参数对象，必须\r\n *     @param  {String}  params.Bucket                  Bucket名称，必须\r\n *     @param  {String}  params.Region                  地域名称，必须\r\n *     @param  {Object}  params.CORSConfiguration       相关的跨域设置，必须\r\n * @param  {Array}  params.CORSConfiguration.CORSRules  对应的跨域规则\r\n * @param  {Function}  callback                         回调函数，必须\r\n * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                              返回的数据\r\n */\r\nfunction putBucketCors(params, callback) {\r\n\r\n    var CORSConfiguration = params['CORSConfiguration'] || {};\r\n    var CORSRules = CORSConfiguration['CORSRules'] || params['CORSRules'] || [];\r\n    CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);\r\n    util.each(CORSRules, function (rule) {\r\n        util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key, k) {\r\n            var sKey = key + 's';\r\n            var val = rule[sKey] || rule[key] || [];\r\n            delete rule[sKey];\r\n            rule[key] = util.isArray(val) ? val : [val];\r\n        });\r\n    });\r\n\r\n    var xml = util.json2xml({CORSConfiguration: {CORSRule: CORSRules}});\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketCORS',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'cors',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 的 跨域设置\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          返回的数据\r\n *     @return  {Object}  data.CORSRules            Bucket的跨域设置\r\n */\r\nfunction getBucketCors(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketCORS',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'cors',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchCORSConfiguration') {\r\n                var result = {\r\n                    CORSRules: [],\r\n                    statusCode: err.statusCode,\r\n                };\r\n                err.headers && (result.headers = err.headers);\r\n                callback(null, result);\r\n            } else {\r\n                callback(err);\r\n            }\r\n            return;\r\n        }\r\n        var CORSConfiguration = data.CORSConfiguration || {};\r\n        var CORSRules = CORSConfiguration.CORSRules || CORSConfiguration.CORSRule || [];\r\n        CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);\r\n\r\n        util.each(CORSRules, function (rule) {\r\n            util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key, j) {\r\n                var sKey = key + 's';\r\n                var val = rule[sKey] || rule[key] || [];\r\n                delete rule[key];\r\n                rule[sKey] = util.isArray(val) ? val : [val];\r\n            });\r\n        });\r\n\r\n        callback(null, {\r\n            CORSRules: CORSRules,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 删除 Bucket 的 跨域设置\r\n * @param  {Object}  params                 参数对象，必须\r\n *     @param  {String}  params.Bucket      Bucket名称，必须\r\n *     @param  {String}  params.Region      地域名称，必须\r\n * @param  {Function}  callback             回调函数，必须\r\n * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                  返回的数据\r\n */\r\nfunction deleteBucketCors(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteBucketCORS',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'cors',\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode || err.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 的 地域信息\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回数据，包含地域信息 LocationConstraint\r\n */\r\nfunction getBucketLocation(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketLocation',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'location',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, data);\r\n    });\r\n}\r\n\r\nfunction putBucketPolicy(params, callback) {\r\n    var Policy = params['Policy'];\r\n    var PolicyStr = Policy;\r\n    try {\r\n        if (typeof Policy === 'string') {\r\n            Policy = JSON.parse(PolicyStr);\r\n        } else {\r\n            PolicyStr = JSON.stringify(Policy);\r\n        }\r\n    } catch (e) {\r\n        callback({error: 'Policy format error'});\r\n    }\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/json';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(PolicyStr));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketPolicy',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        action: 'policy',\r\n        body: util.isBrowser ? PolicyStr : Policy,\r\n        headers: headers,\r\n        json: true,\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 的读取权限策略\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回数据\r\n */\r\nfunction getBucketPolicy(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketPolicy',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'policy',\r\n        rawBody: true,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if (err.statusCode && err.statusCode === 403) {\r\n                return callback({ErrorStatus: 'Access Denied'});\r\n            }\r\n            if (err.statusCode && err.statusCode === 405) {\r\n                return callback({ErrorStatus: 'Method Not Allowed'});\r\n            }\r\n            if (err.statusCode && err.statusCode === 404) {\r\n                return callback({ErrorStatus: 'Policy Not Found'});\r\n            }\r\n            return callback(err);\r\n        }\r\n        var Policy = {};\r\n        try {\r\n            Policy = JSON.parse(data.body);\r\n        } catch (e) {\r\n        }\r\n        callback(null, {\r\n            Policy: Policy,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 删除 Bucket 的 跨域设置\r\n * @param  {Object}  params                 参数对象，必须\r\n *     @param  {String}  params.Bucket      Bucket名称，必须\r\n *     @param  {String}  params.Region      地域名称，必须\r\n * @param  {Function}  callback             回调函数，必须\r\n * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                  返回的数据\r\n */\r\nfunction deleteBucketPolicy(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteBucketPolicy',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'policy',\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode || err.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 设置 Bucket 的标签\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n *     @param  {Array}   params.TagSet  标签设置，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回数据\r\n */\r\nfunction putBucketTagging(params, callback) {\r\n\r\n    var Tagging = params['Tagging'] || {};\r\n    var Tags = Tagging.TagSet || Tagging.Tags || params['Tags'] || [];\r\n    Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\r\n    var xml = util.json2xml({Tagging: {TagSet: {Tag: Tags}}});\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketTagging',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'tagging',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 的标签设置\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回数据\r\n */\r\nfunction getBucketTagging(params, callback) {\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketTagging',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'tagging',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if (err.statusCode === 404 && err.error && (err.error === \"Not Found\" || err.error.Code === 'NoSuchTagSet')) {\r\n                var result = {\r\n                    Tags: [],\r\n                    statusCode: err.statusCode,\r\n                };\r\n                err.headers && (result.headers = err.headers);\r\n                callback(null, result);\r\n            } else {\r\n                callback(err);\r\n            }\r\n            return;\r\n        }\r\n        var Tags = [];\r\n        try {\r\n            Tags = data.Tagging.TagSet.Tag || [];\r\n        } catch (e) {\r\n        }\r\n        Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\r\n        callback(null, {\r\n            Tags: Tags,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 删除 Bucket 的 标签设置\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回的数据\r\n */\r\nfunction deleteBucketTagging(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteBucketTagging',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'tagging',\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\nfunction putBucketLifecycle(params, callback) {\r\n\r\n    var LifecycleConfiguration = params['LifecycleConfiguration'] || {};\r\n    var Rules = LifecycleConfiguration.Rules || params.Rules || [];\r\n    Rules = util.clone(Rules);\r\n    var xml = util.json2xml({LifecycleConfiguration: {Rule: Rules}});\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketLifecycle',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'lifecycle',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\nfunction getBucketLifecycle(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketLifecycle',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'lifecycle',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchLifecycleConfiguration') {\r\n                var result = {\r\n                    Rules: [],\r\n                    statusCode: err.statusCode,\r\n                };\r\n                err.headers && (result.headers = err.headers);\r\n                callback(null, result);\r\n            } else {\r\n                callback(err);\r\n            }\r\n            return;\r\n        }\r\n        var Rules = [];\r\n        try {\r\n            Rules = data.LifecycleConfiguration.Rule || [];\r\n        } catch (e) {\r\n        }\r\n        Rules = util.clone(util.isArray(Rules) ? Rules : [Rules]);\r\n        callback(null, {\r\n            Rules: Rules,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\nfunction deleteBucketLifecycle(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteBucketLifecycle',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'lifecycle',\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\nfunction putBucketVersioning(params, callback) {\r\n\r\n    if (!params['VersioningConfiguration']) {\r\n        callback({error: 'missing param VersioningConfiguration'});\r\n        return;\r\n    }\r\n    var VersioningConfiguration = params['VersioningConfiguration'] || {};\r\n    var xml = util.json2xml({VersioningConfiguration: VersioningConfiguration});\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketVersioning',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'versioning',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\nfunction getBucketVersioning(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketVersioning',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'versioning',\r\n    }, function (err, data) {\r\n        if (!err) {\r\n            !data.VersioningConfiguration && (data.VersioningConfiguration = {});\r\n        }\r\n        callback(err, data);\r\n    });\r\n}\r\n\r\nfunction putBucketReplication(params, callback) {\r\n    var ReplicationConfiguration = util.clone(params.ReplicationConfiguration);\r\n    var xml = util.json2xml({ReplicationConfiguration: ReplicationConfiguration});\r\n    xml = xml.replace(/<(\\/?)Rules>/ig, '<$1Rule>');\r\n    xml = xml.replace(/<(\\/?)Tags>/ig, '<$1Tag>');\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketReplication',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'replication',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\nfunction getBucketReplication(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketReplication',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'replication',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if (err.statusCode === 404 && err.error && (err.error === 'Not Found' || err.error.Code === 'ReplicationConfigurationnotFoundError')) {\r\n                var result = {\r\n                    ReplicationConfiguration: {Rules: []},\r\n                    statusCode: err.statusCode,\r\n                };\r\n                err.headers && (result.headers = err.headers);\r\n                callback(null, result);\r\n            } else {\r\n                callback(err);\r\n            }\r\n            return;\r\n        }\r\n        if (!err) {\r\n            !data.ReplicationConfiguration && (data.ReplicationConfiguration = {});\r\n        }\r\n        if (data.ReplicationConfiguration.Rule) {\r\n            data.ReplicationConfiguration.Rules = data.ReplicationConfiguration.Rule;\r\n            delete data.ReplicationConfiguration.Rule;\r\n        }\r\n        callback(err, data);\r\n    });\r\n}\r\n\r\nfunction deleteBucketReplication(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteBucketReplication',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'replication',\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 设置 Bucket 静态网站配置信息\r\n * @param  {Object}  params                                                 参数对象，必须\r\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\r\n *     @param  {String}  params.Region                                      地域名称，必须\r\n *     @param  {Object}  params.WebsiteConfiguration                        地域名称，必须\r\n *         @param  {Object}   WebsiteConfiguration.IndexDocument            索引文档，必须\r\n *         @param  {Object}   WebsiteConfiguration.ErrorDocument            错误文档，非必须\r\n *         @param  {Object}   WebsiteConfiguration.RedirectAllRequestsTo    重定向所有请求，非必须\r\n *         @param  {Array}   params.RoutingRules                            重定向规则，非必须\r\n * @param  {Function}  callback                                             回调函数，必须\r\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                                                  返回数据\r\n */\r\nfunction putBucketWebsite(params, callback) {\r\n\r\n    if (!params['WebsiteConfiguration']) {\r\n        callback({ error: 'missing param WebsiteConfiguration' });\r\n        return;\r\n    }\r\n\r\n    var WebsiteConfiguration = util.clone(params['WebsiteConfiguration'] || {});\r\n    var RoutingRules = WebsiteConfiguration['RoutingRules'] || WebsiteConfiguration['RoutingRule'] || [];\r\n    RoutingRules = util.isArray(RoutingRules) ? RoutingRules : [RoutingRules];\r\n    delete WebsiteConfiguration.RoutingRule;\r\n    delete WebsiteConfiguration.RoutingRules;\r\n    if (RoutingRules.length) WebsiteConfiguration.RoutingRules = { RoutingRule: RoutingRules };\r\n    var xml = util.json2xml({ WebsiteConfiguration: WebsiteConfiguration });\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketWebsite',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'website',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 的静态网站配置信息\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回数据\r\n */\r\nfunction getBucketWebsite(params, callback) {\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketWebsite',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        headers: params.Headers,\r\n        action: 'website',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if(err.statusCode === 404 && err.error.Code === 'NoSuchWebsiteConfiguration'){\r\n                var result = {\r\n                    WebsiteConfiguration: {},\r\n                    statusCode: err.statusCode,\r\n                };\r\n                err.headers && (result.headers = err.headers);\r\n                callback(null, result);\r\n            } else {\r\n                callback(err);\r\n            }\r\n            return;\r\n        }\r\n\r\n        var WebsiteConfiguration = data.WebsiteConfiguration || {};\r\n        if (WebsiteConfiguration['RoutingRules']) {\r\n            var RoutingRules = util.clone(WebsiteConfiguration['RoutingRules'].RoutingRule || []);\r\n            RoutingRules = util.makeArray(RoutingRules);\r\n            WebsiteConfiguration.RoutingRules = RoutingRules;\r\n        }\r\n\r\n        callback(null, {\r\n            WebsiteConfiguration: WebsiteConfiguration,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 删除 Bucket 的静态网站配置\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回数据\r\n */\r\nfunction deleteBucketWebsite(params, callback) {\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteBucketWebsite',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        action: 'website',\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * 设置 Bucket 的防盗链白名单或者黑名单\r\n * @param  {Object}  params                                                 参数对象，必须\r\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\r\n *     @param  {String}  params.Region                                      地域名称，必须\r\n *     @param  {Object}  params.RefererConfiguration                        地域名称，必须\r\n *         @param  {String}   RefererConfiguration.Status                   是否开启防盗链，枚举值：Enabled、Disabled\r\n *         @param  {String}   RefererConfiguration.RefererType              防盗链类型，枚举值：Black-List、White-List，必须\r\n *         @param  {Array}   RefererConfiguration.DomianList.Domain         生效域名，必须\r\n *         @param  {String}   RefererConfiguration.EmptyReferConfiguration  ，非必须\r\n * @param  {Function}  callback                                             回调函数，必须\r\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                                                  返回数据\r\n */\r\nfunction putBucketReferer(params, callback) {\r\n\r\n    if (!params['RefererConfiguration']) {\r\n        callback({ error: 'missing param RefererConfiguration' });\r\n        return;\r\n    }\r\n\r\n    var RefererConfiguration = util.clone(params['RefererConfiguration'] || {});\r\n    var DomainList = RefererConfiguration['DomainList'] || {};\r\n    var Domains = DomainList['Domains'] || DomainList['Domain'] || [];\r\n    Domains = util.isArray(Domains) ? Domains : [Domains];\r\n    if (Domains.length) RefererConfiguration.DomainList = {Domain: Domains};\r\n    var xml = util.json2xml({ RefererConfiguration: RefererConfiguration });\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutBucketReferer',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'referer',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err && err.statusCode === 204) {\r\n            return callback(null, {statusCode: err.statusCode});\r\n        } else if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 Bucket 的防盗链白名单或者黑名单\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回数据\r\n */\r\nfunction getBucketReferer(params, callback) {\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketReferer',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        headers: params.Headers,\r\n        action: 'referer',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if(err.statusCode === 404 && err.error.Code === 'NoSuchRefererConfiguration'){\r\n                var result = {\r\n                    WebsiteConfiguration: {},\r\n                    statusCode: err.statusCode,\r\n                };\r\n                err.headers && (result.headers = err.headers);\r\n                callback(null, result);\r\n            } else {\r\n                callback(err);\r\n            }\r\n            return;\r\n        }\r\n\r\n        var RefererConfiguration = data.RefererConfiguration || {};\r\n        if (RefererConfiguration['DomainList']) {\r\n            var Domains = util.clone(RefererConfiguration['DomainList'].Domain || []);\r\n            Domains = util.makeArray(Domains);\r\n            RefererConfiguration.DomainList = {Domains: Domains};\r\n        }\r\n\r\n        callback(null, {\r\n            RefererConfiguration: RefererConfiguration,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n// Object 相关\r\n\r\n/**\r\n * 取回对应Object的元数据，Head的权限与Get的权限一致\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n *     @param  {String}  params.Key                 文件名称，必须\r\n *     @param  {String}  params.IfModifiedSince     当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          为指定 object 的元数据，如果设置了 IfModifiedSince ，且文件未修改，则返回一个对象，NotModified 属性为 true\r\n *     @return  {Boolean}  data.NotModified         是否在 IfModifiedSince 时间点之后未修改该 object，则为 true\r\n */\r\nfunction headObject(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:HeadObject',\r\n        method: 'HEAD',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        VersionId: params.VersionId,\r\n        headers: params.Headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            var statusCode = err.statusCode;\r\n            if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {\r\n                return callback(null, {\r\n                    NotModified: true,\r\n                    statusCode: statusCode,\r\n                });\r\n            }\r\n            return callback(err);\r\n        }\r\n        if (data.headers && data.headers.etag) {\r\n            data.ETag = data.headers && data.headers.etag;\r\n        }\r\n        callback(null, data);\r\n    });\r\n}\r\n\r\n\r\nfunction listObjectVersions(params, callback) {\r\n    var reqParams = {};\r\n    reqParams['prefix'] = params['Prefix'] || '';\r\n    reqParams['delimiter'] = params['Delimiter'];\r\n    reqParams['key-marker'] = params['KeyMarker'];\r\n    reqParams['version-id-marker'] = params['VersionIdMarker'];\r\n    reqParams['max-keys'] = params['MaxKeys'];\r\n    reqParams['encoding-type'] = params['EncodingType'];\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetBucketObjectVersions',\r\n        ResourceKey: reqParams['prefix'],\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        qs: reqParams,\r\n        action: 'versions',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var ListVersionsResult = data.ListVersionsResult || {};\r\n        var DeleteMarkers = ListVersionsResult.DeleteMarker || [];\r\n        DeleteMarkers = util.isArray(DeleteMarkers) ? DeleteMarkers : [DeleteMarkers];\r\n        var Versions = ListVersionsResult.Version || [];\r\n        Versions = util.isArray(Versions) ? Versions : [Versions];\r\n\r\n        var result = util.clone(ListVersionsResult);\r\n        delete result.DeleteMarker;\r\n        delete result.Version;\r\n        util.extend(result, {\r\n            DeleteMarkers: DeleteMarkers,\r\n            Versions: Versions,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\n/**\r\n * 下载 object\r\n * @param  {Object}  params                                 参数对象，必须\r\n *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n *     @param  {String}  params.Region                      地域名称，必须\r\n *     @param  {String}  params.Key                         文件名称，必须\r\n *     @param  {WriteStream}  params.Output                 文件写入流，非必须\r\n *     @param  {String}  params.IfModifiedSince             当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须\r\n *     @param  {String}  params.IfUnmodifiedSince           如果文件修改时间早于或等于指定时间，才返回文件内容。否则返回 412 (precondition failed)，非必须\r\n *     @param  {String}  params.IfMatch                     当 ETag 与指定的内容一致，才返回文件。否则返回 412 (precondition failed)，非必须\r\n *     @param  {String}  params.IfNoneMatch                 当 ETag 与指定的内容不一致，才返回文件。否则返回304 (not modified)，非必须\r\n *     @param  {String}  params.ResponseContentType         设置返回头部中的 Content-Type 参数，非必须\r\n *     @param  {String}  params.ResponseContentLanguage     设置返回头部中的 Content-Language 参数，非必须\r\n *     @param  {String}  params.ResponseExpires             设置返回头部中的 Content-Expires 参数，非必须\r\n *     @param  {String}  params.ResponseCacheControl        设置返回头部中的 Cache-Control 参数，非必须\r\n *     @param  {String}  params.ResponseContentDisposition  设置返回头部中的 Content-Disposition 参数，非必须\r\n *     @param  {String}  params.ResponseContentEncoding     设置返回头部中的 Content-Encoding 参数，非必须\r\n * @param  {Function}  callback                             回调函数，必须\r\n * @param  {Object}  err                                    请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @param  {Object}  data                                   为对应的 object 数据，包括 body 和 headers\r\n */\r\nfunction getObject(params, callback) {\r\n    var reqParams = {};\r\n\r\n    reqParams['response-content-type'] = params['ResponseContentType'];\r\n    reqParams['response-content-language'] = params['ResponseContentLanguage'];\r\n    reqParams['response-expires'] = params['ResponseExpires'];\r\n    reqParams['response-cache-control'] = params['ResponseCacheControl'];\r\n    reqParams['response-content-disposition'] = params['ResponseContentDisposition'];\r\n    reqParams['response-content-encoding'] = params['ResponseContentEncoding'];\r\n\r\n    var BodyType;\r\n\r\n    var self = this;\r\n    var outputStream = params.Output;\r\n    if (outputStream && typeof outputStream === 'string') {\r\n        outputStream = fs.createWriteStream(outputStream);\r\n        BodyType = 'stream';\r\n    } else if (outputStream && typeof outputStream.pipe === 'function') {\r\n        BodyType = 'stream';\r\n    } else {\r\n        BodyType = 'buffer';\r\n    }\r\n\r\n    var onProgress = params.onProgress;\r\n    var onDownloadProgress = (function () {\r\n        var time0 = Date.now();\r\n        var size0 = 0;\r\n        var FinishSize = 0;\r\n        var FileSize = 0;\r\n        var progressTimer;\r\n        var update = function () {\r\n            progressTimer = 0;\r\n            if (onProgress && (typeof onProgress === 'function')) {\r\n                var time1 = Date.now();\r\n                var speed = parseInt((FinishSize - size0) / ((time1 - time0) / 1000) * 100) / 100 || 0;\r\n                var percent = parseInt(FinishSize / FileSize * 100) / 100 || 0;\r\n                time0 = time1;\r\n                size0 = FinishSize;\r\n                try {\r\n                    onProgress({\r\n                        loaded: FinishSize,\r\n                        total: FileSize,\r\n                        speed: speed,\r\n                        percent: percent\r\n                    });\r\n                } catch (e) {\r\n                }\r\n            }\r\n        };\r\n        return function (info, immediately) {\r\n            if (info && info.loaded) {\r\n                FinishSize = info.loaded;\r\n                FileSize = info.total;\r\n            }\r\n            if (immediately) {\r\n                clearTimeout(progressTimer);\r\n                update();\r\n            } else {\r\n                if (progressTimer) return;\r\n                progressTimer = setTimeout(update, self.options.ProgressInterval || 1000);\r\n            }\r\n        };\r\n    })();\r\n\r\n    // 如果用户自己传入了 output\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetObject',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        VersionId: params.VersionId,\r\n        headers: params.Headers,\r\n        qs: reqParams,\r\n        rawBody: true,\r\n        outputStream: outputStream,\r\n        onDownloadProgress: onDownloadProgress,\r\n    }, function (err, data) {\r\n        onDownloadProgress(null, true);\r\n        if (err) {\r\n            var statusCode = err.statusCode;\r\n            if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {\r\n                return callback(null, {\r\n                    NotModified: true\r\n                });\r\n            }\r\n            return callback(err);\r\n        }\r\n        var result = {};\r\n        if (data.body) {\r\n            if (BodyType === 'buffer') {\r\n                result.Body = Buffer.from(data.body);\r\n            } else if (BodyType === 'string') {\r\n                result.Body = data.body;\r\n            }\r\n        }\r\n        if (data.headers && data.headers.etag) {\r\n            result.ETag = data.headers && data.headers.etag;\r\n        }\r\n        util.extend(result, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n\r\n}\r\n\r\n/**\r\n * 上传 object\r\n * @param  {Object} params                                          参数对象，必须\r\n *     @param  {String}  params.Bucket                              Bucket名称，必须\r\n *     @param  {String}  params.Region                              地域名称，必须\r\n *     @param  {String}  params.Key                                 文件名称，必须\r\n *     @param  {Buffer || ReadStream || String}  params.Body        上传文件的内容或流或字符串\r\n *     @param  {String}  params.CacheControl                        RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ContentDisposition                  RFC 2616 中定义的文件名称，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ContentEncoding                     RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ContentLength                       RFC 2616 中定义的 HTTP 请求内容长度（字节），必须\r\n *     @param  {String}  params.ContentType                         RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.Expect                              当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须\r\n *     @param  {String}  params.Expires                             RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ACL                                 允许用户自定义文件权限，有效值：private | public-read，非必须\r\n *     @param  {String}  params.GrantRead                           赋予被授权者读取对象的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n *     @param  {String}  params.GrantReadAcp                        赋予被授权者读取对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n *     @param  {String}  params.GrantWriteAcp                       赋予被授权者写入对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n *     @param  {String}  params.GrantFullControl                    赋予被授权者操作对象的所有权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n *     @param  {String}  params.StorageClass                        设置对象的存储级别，枚举值：STANDARD、STANDARD_IA、ARCHIVE，默认值：STANDARD，非必须\r\n *     @param  {String}  params.x-cos-meta-*                        允许用户自定义的头部信息，将作为对象的元数据保存。大小限制2KB，非必须\r\n *     @param  {String}  params.ContentSha1                         RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验，非必须\r\n *     @param  {String}  params.ServerSideEncryption                支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n *     @param  {Function}  params.onProgress                        上传进度回调函数\r\n * @param  {Function}  callback                                     回调函数，必须\r\n * @return  {Object}  err                                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                                          为对应的 object 数据\r\n *     @return  {String}  data.ETag                                 为对应上传文件的 ETag 值\r\n */\r\nfunction putObject(params, callback) {\r\n    var self = this;\r\n    var FileSize = params.ContentLength;\r\n    var onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\r\n\r\n    util.getBodyMd5(self.options.UploadCheckContentMd5, params.Body, function (md5) {\r\n        if (md5) (params.Headers['Content-MD5'] = util.binaryBase64(md5));\r\n        if (params.ContentLength !== undefined) {\r\n            params.Headers['Content-Length'] = params.ContentLength;\r\n        }\r\n        onProgress(null, true); // 任务状态开始 uploading\r\n        submitRequest.call(self, {\r\n            Action: 'name/cos:PutObject',\r\n            TaskId: params.TaskId,\r\n            method: 'PUT',\r\n            Bucket: params.Bucket,\r\n            Region: params.Region,\r\n            Key: params.Key,\r\n            headers: params.Headers,\r\n            body: params.Body,\r\n            onProgress: onProgress,\r\n        }, function (err, data) {\r\n            if (err) {\r\n                onProgress(null, true);\r\n                return callback(err);\r\n            }\r\n            onProgress({loaded: FileSize, total: FileSize}, true);\r\n            if (data) {\r\n                var url = getUrl({\r\n                    ForcePathStyle: self.options.ForcePathStyle,\r\n                    protocol: self.options.Protocol,\r\n                    domain: self.options.Domain,\r\n                    bucket: params.Bucket,\r\n                    region: params.Region,\r\n                    object: params.Key,\r\n                });\r\n                url = url.substr(url.indexOf('://') + 3);\r\n                var result = {\r\n                    Location: url,\r\n                    statusCode: data.statusCode,\r\n                    headers: data.headers,\r\n                };\r\n                if (data.headers && data.headers.etag) {\r\n                    result.ETag = data.headers.etag;\r\n                }\r\n                return callback(null, result);\r\n            }\r\n            callback(null, data);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 删除 object\r\n * @param  {Object}  params                     参数对象，必须\r\n *     @param  {String}  params.Bucket          Bucket名称，必须\r\n *     @param  {String}  params.Region          地域名称，必须\r\n *     @param  {String}  params.Key             object名称，必须\r\n * @param  {Function}  callback                 回调函数，必须\r\n * @param  {Object}  err                        请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @param  {Object}  data                       删除操作成功之后返回的数据\r\n */\r\nfunction deleteObject(params, callback) {\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:DeleteObject',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        headers: params.Headers,\r\n        VersionId: params.VersionId,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            var statusCode = err.statusCode;\r\n            if (statusCode && statusCode === 204) {\r\n                return callback(null, {statusCode: statusCode});\r\n            } else if (statusCode && statusCode === 404) {\r\n                return callback(null, {BucketNotFound: true, statusCode: statusCode,});\r\n            } else {\r\n                return callback(err);\r\n            }\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取 object 的 权限列表\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n *     @param  {String}  params.Key                 object名称，必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          返回的数据\r\n *     @return  {Object}  data.AccessControlPolicy  权限列表\r\n */\r\nfunction getObjectAcl(params, callback) {\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:GetObjectACL',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        headers: params.Headers,\r\n        action: 'acl',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var AccessControlPolicy = data.AccessControlPolicy || {};\r\n        var Owner = AccessControlPolicy.Owner || {};\r\n        var Grant = AccessControlPolicy.AccessControlList && AccessControlPolicy.AccessControlList.Grant || [];\r\n        Grant = util.isArray(Grant) ? Grant : [Grant];\r\n        var result = decodeAcl(AccessControlPolicy);\r\n        if (data.headers && data.headers['x-cos-acl']) {\r\n            result.ACL = data.headers['x-cos-acl'];\r\n        }\r\n        result = util.extend(result, {\r\n            Owner: Owner,\r\n            Grants: Grant,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\n/**\r\n * 设置 object 的 权限列表\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n *     @param  {String}  params.Key     object名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回的数据\r\n */\r\nfunction putObjectAcl(params, callback) {\r\n    var headers = params.Headers;\r\n\r\n    var xml = '';\r\n    if (params['AccessControlPolicy']) {\r\n        var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});\r\n        var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;\r\n        Grants = util.isArray(Grants) ? Grants : [Grants];\r\n        delete AccessControlPolicy.Grant;\r\n        delete AccessControlPolicy.Grants;\r\n        AccessControlPolicy.AccessControlList = {Grant: Grants};\r\n        xml = util.json2xml({AccessControlPolicy: AccessControlPolicy});\r\n\r\n        headers['Content-Type'] = 'application/xml';\r\n        headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n    }\r\n\r\n    // Grant Header 去重\r\n    util.each(headers, function (val, key) {\r\n        if (key.indexOf('x-cos-grant-') === 0) {\r\n            headers[key] = uniqGrant(headers[key]);\r\n        }\r\n    });\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:PutObjectACL',\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        action: 'acl',\r\n        headers: headers,\r\n        body: xml,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Options Object请求实现跨域访问的预请求。即发出一个 OPTIONS 请求给服务器以确认是否可以进行跨域操作。\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Bucket  Bucket名称，必须\r\n *     @param  {String}  params.Region  地域名称，必须\r\n *     @param  {String}  params.Key     object名称，必须\r\n * @param  {Function}  callback         回调函数，必须\r\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data              返回的数据\r\n */\r\nfunction optionsObject(params, callback) {\r\n\r\n    var headers = params.Headers;\r\n    headers['Origin'] = params['Origin'];\r\n    headers['Access-Control-Request-Method'] = params['AccessControlRequestMethod'];\r\n    headers['Access-Control-Request-Headers'] = params['AccessControlRequestHeaders'];\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:OptionsObject',\r\n        method: 'OPTIONS',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            if (err.statusCode && err.statusCode === 403) {\r\n                return callback(null, {\r\n                    OptionsForbidden: true,\r\n                    statusCode: err.statusCode\r\n                });\r\n            }\r\n            return callback(err);\r\n        }\r\n\r\n        var headers = data.headers || {};\r\n        callback(null, {\r\n            AccessControlAllowOrigin: headers['access-control-allow-origin'],\r\n            AccessControlAllowMethods: headers['access-control-allow-methods'],\r\n            AccessControlAllowHeaders: headers['access-control-allow-headers'],\r\n            AccessControlExposeHeaders: headers['access-control-expose-headers'],\r\n            AccessControlMaxAge: headers['access-control-max-age'],\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * @param  {Object}                                     参数列表\r\n *     @param  {String}  Bucket                         Bucket 名称\r\n *     @param  {String}  Region                         地域名称\r\n *     @param  {String}  Key                            文件名称\r\n *     @param  {String}  CopySource                     源文件URL绝对路径，可以通过versionid子资源指定历史版本\r\n *     @param  {String}  ACL                            允许用户自定义文件权限。有效值：private，public-read默认值：private。\r\n *     @param  {String}  GrantRead                      赋予被授权者读的权限，格式 x-cos-grant-read: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\r\n *     @param  {String}  GrantWrite                     赋予被授权者写的权限，格式 x-cos-grant-write: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\r\n *     @param  {String}  GrantFullControl               赋予被授权者读写权限，格式 x-cos-grant-full-control: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\r\n *     @param  {String}  MetadataDirective              是否拷贝元数据，枚举值：Copy, Replaced，默认值Copy。假如标记为Copy，忽略Header中的用户元数据信息直接复制；假如标记为Replaced，按Header信息修改元数据。当目标路径和原路径一致，即用户试图修改元数据时，必须为Replaced\r\n *     @param  {String}  CopySourceIfModifiedSince      当Object在指定时间后被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-None-Match一起使用，与其他条件联合使用返回冲突。\r\n *     @param  {String}  CopySourceIfUnmodifiedSince    当Object在指定时间后未被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-Match一起使用，与其他条件联合使用返回冲突。\r\n *     @param  {String}  CopySourceIfMatch              当Object的Etag和给定一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Unmodified-Since一起使用，与其他条件联合使用返回冲突。\r\n *     @param  {String}  CopySourceIfNoneMatch          当Object的Etag和给定不一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Modified-Since一起使用，与其他条件联合使用返回冲突。\r\n *     @param  {String}  StorageClass                   存储级别，枚举值：存储级别，枚举值：Standard, Standard_IA，Archive；默认值：Standard\r\n *     @param  {String}  CacheControl                   指定所有缓存机制在整个请求/响应链中必须服从的指令。\r\n *     @param  {String}  ContentDisposition             MIME 协议的扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件\r\n *     @param  {String}  ContentEncoding                HTTP 中用来对「采用何种编码格式传输正文」进行协定的一对头部字段\r\n *     @param  {String}  ContentLength                  设置响应消息的实体内容的大小，单位为字节\r\n *     @param  {String}  ContentType                    RFC 2616 中定义的 HTTP 请求内容类型（MIME），例如text/plain\r\n *     @param  {String}  Expect                         请求的特定的服务器行为\r\n *     @param  {String}  Expires                        响应过期的日期和时间\r\n *     @param  {String}  params.ServerSideEncryption   支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n *     @param  {String}  ContentLanguage                指定内容语言\r\n *     @param  {String}  x-cos-meta-*                   允许用户自定义的头部信息，将作为 Object 元数据返回。大小限制2K。\r\n */\r\nfunction putObjectCopy(params, callback) {\r\n\r\n    // 特殊处理 Cache-Control\r\n    var headers = params.Headers;\r\n    !headers['Cache-Control'] && (headers['Cache-Control'] = '');\r\n\r\n    var CopySource = params.CopySource || '';\r\n    var m = CopySource.match(/^([^.]+-\\d+)\\.cos(v6)?\\.([^.]+)\\.[^/]+\\/(.+)$/);\r\n    if (!m) {\r\n        callback({error: 'CopySource format error'});\r\n        return;\r\n    }\r\n\r\n    var SourceBucket = m[1];\r\n    var SourceRegion = m[3];\r\n    var SourceKey = decodeURIComponent(m[4]);\r\n\r\n    submitRequest.call(this, {\r\n        Scope: [{\r\n            action: 'name/cos:GetObject',\r\n            bucket: SourceBucket,\r\n            region: SourceRegion,\r\n            prefix: SourceKey,\r\n        }, {\r\n            action: 'name/cos:PutObject',\r\n            bucket: params.Bucket,\r\n            region: params.Region,\r\n            prefix: params.Key,\r\n        }],\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        VersionId: params.VersionId,\r\n        headers: params.Headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var result = util.clone(data.CopyObjectResult || {});\r\n        util.extend(result, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\nfunction uploadPartCopy(params, callback) {\r\n\r\n    var CopySource = params.CopySource || '';\r\n    var m = CopySource.match(/^([^.]+-\\d+)\\.cos(v6)?\\.([^.]+)\\.[^/]+\\/(.+)$/);\r\n    if (!m) {\r\n        callback({error: 'CopySource format error'});\r\n        return;\r\n    }\r\n\r\n    var SourceBucket = m[1];\r\n    var SourceRegion = m[3];\r\n    var SourceKey = decodeURIComponent(m[4]);\r\n\r\n    submitRequest.call(this, {\r\n        Scope: [{\r\n            action: 'name/cos:GetObject',\r\n            bucket: SourceBucket,\r\n            region: SourceRegion,\r\n            prefix: SourceKey,\r\n        }, {\r\n            action: 'name/cos:PutObject',\r\n            bucket: params.Bucket,\r\n            region: params.Region,\r\n            prefix: params.Key,\r\n        }],\r\n        method: 'PUT',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        VersionId: params.VersionId,\r\n        qs: {\r\n            partNumber: params['PartNumber'],\r\n            uploadId: params['UploadId'],\r\n        },\r\n        headers: params.Headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var result = util.clone(data.CopyPartResult || {});\r\n        util.extend(result, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\nfunction deleteMultipleObject(params, callback) {\r\n    var Objects = params.Objects || [];\r\n    var Quiet = params.Quiet;\r\n    Objects = util.isArray(Objects) ? Objects : [Objects];\r\n\r\n    var xml = util.json2xml({Delete: {Object: Objects, Quiet: Quiet || false}});\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    var Scope = util.map(Objects, function (v) {\r\n        return {\r\n            action: 'name/cos:DeleteObject',\r\n            bucket: params.Bucket,\r\n            region: params.Region,\r\n            prefix: v.Key,\r\n        };\r\n    });\r\n\r\n    submitRequest.call(this, {\r\n        Scope: Scope,\r\n        method: 'POST',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        body: xml,\r\n        action: 'delete',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var DeleteResult = data.DeleteResult || {};\r\n        var Deleted = DeleteResult.Deleted || [];\r\n        var Errors = DeleteResult.Error || [];\r\n\r\n        Deleted = util.isArray(Deleted) ? Deleted : [Deleted];\r\n        Errors = util.isArray(Errors) ? Errors : [Errors];\r\n\r\n        var result = util.clone(DeleteResult);\r\n        util.extend(result, {\r\n            Error: Errors,\r\n            Deleted: Deleted,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\nfunction restoreObject(params, callback) {\r\n    var headers = params.Headers;\r\n    if (!params['RestoreRequest']) {\r\n        callback({error: 'missing param RestoreRequest'});\r\n        return;\r\n    }\r\n\r\n    var RestoreRequest = params.RestoreRequest || {};\r\n    var xml = util.json2xml({RestoreRequest: RestoreRequest});\r\n\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:RestoreObject',\r\n        method: 'POST',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        VersionId: params.VersionId,\r\n        body: xml,\r\n        action: 'restore',\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        callback(err, data);\r\n    });\r\n}\r\n\r\n\r\n// 分块上传\r\n\r\n\r\n/**\r\n * 初始化分块上传\r\n * @param  {Object}  params                                     参数对象，必须\r\n *     @param  {String}  params.Bucket                          Bucket名称，必须\r\n *     @param  {String}  params.Region                          地域名称，必须\r\n *     @param  {String}  params.Key                             object名称，必须\r\n *     @param  {String}  params.UploadId                        object名称，必须\r\n *     @param  {String}  params.CacheControl                    RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ContentDisposition              RFC 2616 中定义的文件名称，将作为 Object 元数据保存    ，非必须\r\n *     @param  {String}  params.ContentEncoding                 RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ContentType                     RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.Expires                         RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ACL                             允许用户自定义文件权限，非必须\r\n *     @param  {String}  params.GrantRead                       赋予被授权者读的权限 ，非必须\r\n *     @param  {String}  params.GrantWrite                      赋予被授权者写的权限 ，非必须\r\n *     @param  {String}  params.GrantFullControl                赋予被授权者读写权限 ，非必须\r\n *     @param  {String}  params.StorageClass                    设置Object的存储级别，枚举值：Standard，Standard_IA，Archive，非必须\r\n *     @param  {String}  params.ServerSideEncryption           支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n * @param  {Function}  callback                                 回调函数，必须\r\n * @return  {Object}  err                                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                                      返回的数据\r\n */\r\nfunction multipartInit(params, callback) {\r\n\r\n    var self = this;\r\n    // 特殊处理 Cache-Control\r\n    var headers = params.Headers;\r\n    !headers['Cache-Control'] && (headers['Cache-Control'] = '');\r\n\r\n    submitRequest.call(self, {\r\n        Action: 'name/cos:InitiateMultipartUpload',\r\n        method: 'POST',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        action: 'uploads',\r\n        headers: params.Headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        data = util.clone(data || {});\r\n        if (data && data.InitiateMultipartUploadResult) {\r\n            return callback(null, util.extend(data.InitiateMultipartUploadResult, {\r\n                statusCode: data.statusCode,\r\n                headers: data.headers,\r\n            }));\r\n        }\r\n        callback(null, data);\r\n    });\r\n}\r\n\r\n/**\r\n * 分块上传\r\n * @param  {Object}  params                                 参数对象，必须\r\n *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n *     @param  {String}  params.Region                      地域名称，必须\r\n *     @param  {String}  params.Key                         object名称，必须\r\n *     @param  {Buffer || Stream || String}  params.Body    上传文件对象或字符串\r\n *     @param  {String} params.ContentLength                RFC 2616 中定义的 HTTP 请求内容长度（字节），非必须\r\n *     @param  {String} params.Expect                       当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须\r\n *     @param  {String} params.ServerSideEncryption         支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n *     @param  {String} params.ContentSha1                  RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验值，非必须\r\n * @param  {Function}  callback                             回调函数，必须\r\n *     @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n *     @return  {Object}  data                              返回的数据\r\n *     @return  {Object}  data.ETag                         返回的文件分块 sha1 值\r\n */\r\nfunction multipartUpload(params, callback) {\r\n\r\n    var self = this;\r\n    util.getFileSize('multipartUpload', params, function () {\r\n        util.getBodyMd5(self.options.UploadCheckContentMd5, params.Body, function (md5) {\r\n            if (md5) params.Headers['Content-MD5'] = util.binaryBase64(md5);\r\n            submitRequest.call(self, {\r\n                Action: 'name/cos:UploadPart',\r\n                TaskId: params.TaskId,\r\n                method: 'PUT',\r\n                Bucket: params.Bucket,\r\n                Region: params.Region,\r\n                Key: params.Key,\r\n                qs: {\r\n                    partNumber: params['PartNumber'],\r\n                    uploadId: params['UploadId'],\r\n                },\r\n                headers: params.Headers,\r\n                onProgress: params.onProgress,\r\n                body: params.Body || null\r\n            }, function (err, data) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                data['headers'] = data['headers'] || {};\r\n                callback(null, {\r\n                    ETag: data['headers']['etag'] || '',\r\n                    statusCode: data.statusCode,\r\n                    headers: data.headers,\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\n}\r\n\r\n/**\r\n * 完成分块上传\r\n * @param  {Object}  params                             参数对象，必须\r\n *     @param  {String}  params.Bucket                  Bucket名称，必须\r\n *     @param  {String}  params.Region                  地域名称，必须\r\n *     @param  {String}  params.Key                     object名称，必须\r\n *     @param  {Array}   params.Parts                   分块信息列表，必须\r\n *     @param  {String}  params.Parts[i].PartNumber     块编号，必须\r\n *     @param  {String}  params.Parts[i].ETag           分块的 sha1 校验值\r\n * @param  {Function}  callback                         回调函数，必须\r\n * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                              返回的数据\r\n *     @return  {Object}  data.CompleteMultipartUpload  完成分块上传后的文件信息，包括Location, Bucket, Key 和 ETag\r\n */\r\nfunction multipartComplete(params, callback) {\r\n    var self = this;\r\n\r\n    var UploadId = params.UploadId;\r\n\r\n    var Parts = params['Parts'];\r\n\r\n    for (var i = 0, len = Parts.length; i < len; i++) {\r\n        if (Parts[i]['ETag'].indexOf('\"') === 0) {\r\n            continue;\r\n        }\r\n        Parts[i]['ETag'] = '\"' + Parts[i]['ETag'] + '\"';\r\n    }\r\n\r\n    var xml = util.json2xml({CompleteMultipartUpload: {Part: Parts}});\r\n\r\n    var headers = params.Headers;\r\n    headers['Content-Type'] = 'application/xml';\r\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:CompleteMultipartUpload',\r\n        method: 'POST',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        qs: {\r\n            uploadId: UploadId\r\n        },\r\n        body: xml,\r\n        headers: headers,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var url = getUrl({\r\n            ForcePathStyle: self.options.ForcePathStyle,\r\n            protocol: self.options.Protocol,\r\n            domain: self.options.Domain,\r\n            bucket: params.Bucket,\r\n            region: params.Region,\r\n            object: params.Key,\r\n            isLocation: true,\r\n        });\r\n        var CompleteMultipartUploadResult = data.CompleteMultipartUploadResult || {};\r\n        var result = util.extend(CompleteMultipartUploadResult, {\r\n            Location: url,\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\n/**\r\n * 分块上传任务列表查询\r\n * @param  {Object}  params                                 参数对象，必须\r\n *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n *     @param  {String}  params.Region                      地域名称，必须\r\n *     @param  {String}  params.Delimiter                   定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，定义为Common Prefix，然后列出所有Common Prefix。如果没有Prefix，则从路径起点开始，非必须\r\n *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须\r\n *     @param  {String}  params.Prefix                      前缀匹配，用来规定返回的文件前缀地址，非必须\r\n *     @param  {String}  params.MaxUploads                  单次返回最大的条目数量，默认1000，非必须\r\n *     @param  {String}  params.KeyMarker                   与upload-id-marker一起使用 </Br>当upload-id-marker未被指定时，ObjectName字母顺序大于key-marker的条目将被列出 </Br>当upload-id-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须\r\n *     @param  {String}  params.UploadIdMarker              与key-marker一起使用 </Br>当key-marker未被指定时，upload-id-marker将被忽略 </Br>当key-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须\r\n * @param  {Function}  callback                             回调函数，必须\r\n * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                                  返回的数据\r\n *     @return  {Object}  data.ListMultipartUploadsResult   分块上传任务信息\r\n */\r\nfunction multipartList(params, callback) {\r\n    var reqParams = {};\r\n\r\n    reqParams['delimiter'] = params['Delimiter'];\r\n    reqParams['encoding-type'] = params['EncodingType'];\r\n    reqParams['prefix'] = params['Prefix'] || '';\r\n\r\n    reqParams['max-uploads'] = params['MaxUploads'];\r\n\r\n    reqParams['key-marker'] = params['KeyMarker'];\r\n    reqParams['upload-id-marker'] = params['UploadIdMarker'];\r\n\r\n    reqParams = util.clearKey(reqParams);\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:ListMultipartUploads',\r\n        ResourceKey: reqParams['prefix'],\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        headers: params.Headers,\r\n        qs: reqParams,\r\n        action: 'uploads',\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n\r\n        if (data && data.ListMultipartUploadsResult) {\r\n            var Upload = data.ListMultipartUploadsResult.Upload || [];\r\n\r\n            var CommonPrefixes = data.ListMultipartUploadsResult.CommonPrefixes || [];\r\n\r\n            CommonPrefixes = util.isArray(CommonPrefixes) ? CommonPrefixes : [CommonPrefixes];\r\n            Upload = util.isArray(Upload) ? Upload : [Upload];\r\n\r\n            data.ListMultipartUploadsResult.Upload = Upload;\r\n            data.ListMultipartUploadsResult.CommonPrefixes = CommonPrefixes;\r\n        }\r\n        var result = util.clone(data.ListMultipartUploadsResult || {});\r\n        util.extend(result, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\n/**\r\n * 上传的分块列表查询\r\n * @param  {Object}  params                                 参数对象，必须\r\n *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n *     @param  {String}  params.Region                      地域名称，必须\r\n *     @param  {String}  params.Key                         object名称，必须\r\n *     @param  {String}  params.UploadId                    标示本次分块上传的ID，必须\r\n *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须\r\n *     @param  {String}  params.MaxParts                    单次返回最大的条目数量，默认1000，非必须\r\n *     @param  {String}  params.PartNumberMarker            默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须\r\n * @param  {Function}  callback                             回调函数，必须\r\n * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                                  返回的数据\r\n *     @return  {Object}  data.ListMultipartUploadsResult   分块信息\r\n */\r\nfunction multipartListPart(params, callback) {\r\n    var reqParams = {};\r\n\r\n    reqParams['uploadId'] = params['UploadId'];\r\n    reqParams['encoding-type'] = params['EncodingType'];\r\n    reqParams['max-parts'] = params['MaxParts'];\r\n    reqParams['part-number-marker'] = params['PartNumberMarker'];\r\n\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:ListParts',\r\n        method: 'GET',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        headers: params.Headers,\r\n        qs: reqParams,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        var ListPartsResult = data.ListPartsResult || {};\r\n        var Part = ListPartsResult.Part || [];\r\n        Part = util.isArray(Part) ? Part : [Part];\r\n\r\n        ListPartsResult.Part = Part;\r\n        var result = util.clone(ListPartsResult);\r\n        util.extend(result, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n        callback(null, result);\r\n    });\r\n}\r\n\r\n/**\r\n * 抛弃分块上传\r\n * @param  {Object}  params                 参数对象，必须\r\n *     @param  {String}  params.Bucket      Bucket名称，必须\r\n *     @param  {String}  params.Region      地域名称，必须\r\n *     @param  {String}  params.Key         object名称，必须\r\n *     @param  {String}  params.UploadId    标示本次分块上传的ID，必须\r\n * @param  {Function}  callback             回调函数，必须\r\n *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n *     @return  {Object}    data            返回的数据\r\n */\r\nfunction multipartAbort(params, callback) {\r\n    var reqParams = {};\r\n\r\n    reqParams['uploadId'] = params['UploadId'];\r\n    submitRequest.call(this, {\r\n        Action: 'name/cos:AbortMultipartUpload',\r\n        method: 'DELETE',\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        headers: params.Headers,\r\n        qs: reqParams,\r\n    }, function (err, data) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        callback(null, {\r\n            statusCode: data.statusCode,\r\n            headers: data.headers,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * 获取签名\r\n * @param  {Object}  params             参数对象，必须\r\n *     @param  {String}  params.Method  请求方法，必须\r\n *     @param  {String}  params.Key     object名称，必须\r\n *     @param  {String}  params.Expires 名超时时间，单位秒，可选\r\n * @return  {String}  data              返回签名字符串\r\n */\r\nfunction getAuth(params) {\r\n    var self = this;\r\n    return util.getAuth({\r\n        SecretId: params.SecretId || this.options.SecretId || '',\r\n        SecretKey: params.SecretKey || this.options.SecretKey || '',\r\n        Method: params.Method,\r\n        Key: params.Key,\r\n        Query: params.Query,\r\n        Headers: params.Headers,\r\n        Expires: params.Expires,\r\n        UseRawKey: self.options.UseRawKey,\r\n        SystemClockOffset: self.options.SystemClockOffset,\r\n    });\r\n}\r\n\r\nfunction getV4Auth(params) {\r\n    return util.getV4Auth({\r\n        SecretId: params.SecretId || this.options.SecretId || '',\r\n        SecretKey: params.SecretKey || this.options.SecretKey || '',\r\n        Bucket: params.Bucket,\r\n        Key: params.Key,\r\n        Expires: params.Expires,\r\n    });\r\n}\r\n\r\n/**\r\n * 获取文件下载链接\r\n * @param  {Object}  params                 参数对象，必须\r\n *     @param  {String}  params.Bucket      Bucket名称，必须\r\n *     @param  {String}  params.Region      地域名称，必须\r\n *     @param  {String}  params.Key         object名称，必须\r\n *     @param  {String}  params.Method      请求的方法，可选\r\n *     @param  {String}  params.Expires     签名超时时间，单位秒，可选\r\n * @param  {Function}  callback             回调函数，必须\r\n *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n *     @return  {Object}    data            返回的数据\r\n */\r\nfunction getObjectUrl(params, callback) {\r\n    var self = this;\r\n    var url = getUrl({\r\n        ForcePathStyle: self.options.ForcePathStyle,\r\n        protocol: params.Protocol || self.options.Protocol,\r\n        domain: self.options.Domain,\r\n        bucket: params.Bucket,\r\n        region: params.Region,\r\n        object: params.Key,\r\n    });\r\n    if (params.Sign !== undefined && !params.Sign) {\r\n        callback(null, {Url: url});\r\n        return url;\r\n    }\r\n    var AuthData = getAuthorizationAsync.call(this, {\r\n        Action: ((params.Method || '').toUpperCase() === 'PUT' ? 'name/cos:PutObject' : 'name/cos:GetObject'),\r\n        Bucket: params.Bucket || '',\r\n        Region: params.Region || '',\r\n        Method: params.Method || 'get',\r\n        Key: params.Key,\r\n        Expires: params.Expires,\r\n    }, function (err, AuthData) {\r\n        if (!callback) return;\r\n        if (err) {\r\n            callback(err);\r\n            return;\r\n        }\r\n        var signUrl = url;\r\n        signUrl += '?' + (AuthData.Authorization.indexOf('q-signature') > -1 ?\r\n            AuthData.Authorization : 'sign=' + encodeURIComponent(AuthData.Authorization));\r\n        AuthData.XCosSecurityToken && (signUrl += '&x-cos-security-token=' + AuthData.XCosSecurityToken);\r\n        AuthData.ClientIP && (signUrl += '&clientIP=' + AuthData.ClientIP);\r\n        AuthData.ClientUA && (signUrl += '&clientUA=' + AuthData.ClientUA);\r\n        AuthData.Token && (signUrl += '&token=' + AuthData.Token);\r\n        setTimeout(function () {\r\n            callback(null, {Url: signUrl});\r\n        });\r\n    });\r\n    if (AuthData) {\r\n        return url + '?' + AuthData.Authorization +\r\n            (AuthData.XCosSecurityToken ? '&x-cos-security-token=' + AuthData.XCosSecurityToken : '');\r\n    } else {\r\n        return url;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 私有方法\r\n */\r\nfunction decodeAcl(AccessControlPolicy) {\r\n    var result = {\r\n        GrantFullControl: [],\r\n        GrantWrite: [],\r\n        GrantRead: [],\r\n        GrantReadAcp: [],\r\n        GrantWriteAcp: [],\r\n        ACL: '',\r\n    };\r\n    var GrantMap = {\r\n        'FULL_CONTROL': 'GrantFullControl',\r\n        'WRITE': 'GrantWrite',\r\n        'READ': 'GrantRead',\r\n        'READ_ACP': 'GrantReadAcp',\r\n        'WRITE_ACP': 'GrantWriteAcp',\r\n    };\r\n    var Grant = AccessControlPolicy.AccessControlList.Grant;\r\n    if (Grant) {\r\n        Grant = util.isArray(Grant) ? Grant : [Grant];\r\n    }\r\n    var PublicAcl = {READ: 0, WRITE: 0, FULL_CONTROL: 0};\r\n    Grant.length && util.each(Grant, function (item) {\r\n        if (item.Grantee.ID === 'qcs::cam::anyone:anyone' || item.Grantee.URI === 'http://cam.qcloud.com/groups/global/AllUsers') {\r\n            PublicAcl[item.Permission] = 1;\r\n        } else if (item.Grantee.ID !== AccessControlPolicy.Owner.ID) {\r\n            result[GrantMap[item.Permission]].push('id=\"' + item.Grantee.ID + '\"');\r\n        }\r\n    });\r\n    if (PublicAcl.FULL_CONTROL || (PublicAcl.WRITE && PublicAcl.READ)) {\r\n        result.ACL = 'public-read-write';\r\n    } else if (PublicAcl.READ) {\r\n        result.ACL = 'public-read';\r\n    } else {\r\n        result.ACL = 'private';\r\n    }\r\n    util.each(GrantMap, function (item) {\r\n        result[item] = uniqGrant(result[item].join(','));\r\n    });\r\n    return result;\r\n}\r\n\r\n// Grant 去重\r\nfunction uniqGrant(str) {\r\n    var arr = str.split(',');\r\n    var exist = {};\r\n    var i, item;\r\n    for (i = 0; i < arr.length; ) {\r\n        item = arr[i].trim();\r\n        if (exist[item]) {\r\n            arr.splice(i, 1);\r\n        } else {\r\n            exist[item] = true;\r\n            arr[i] = item;\r\n            i++;\r\n        }\r\n    }\r\n    return arr.join(',');\r\n}\r\n\r\n// 生成操作 url\r\nfunction getUrl(params) {\r\n    var longBucket = params.bucket;\r\n    var shortBucket = longBucket.substr(0, longBucket.lastIndexOf('-'));\r\n    var appId = longBucket.substr(longBucket.lastIndexOf('-') + 1);\r\n    var domain = params.domain;\r\n    var region = params.region;\r\n    var object = params.object;\r\n    var protocol = params.protocol || (util.isBrowser && location.protocol === 'http:' ? 'http:' : 'https:');\r\n    if (!domain) {\r\n        if (['cn-south', 'cn-south-2', 'cn-north', 'cn-east', 'cn-southwest', 'sg'].indexOf(region) > -1) {\r\n            domain = '{Region}.myqcloud.com';\r\n        } else {\r\n            domain = 'cos.{Region}.myqcloud.com';\r\n        }\r\n        if (!params.ForcePathStyle) {\r\n            domain = '{Bucket}.' + domain;\r\n        }\r\n    }\r\n    domain = domain.replace(/\\{\\{AppId\\}\\}/ig, appId)\r\n        .replace(/\\{\\{Bucket\\}\\}/ig, shortBucket)\r\n        .replace(/\\{\\{Region\\}\\}/ig, region)\r\n        .replace(/\\{\\{.*?\\}\\}/ig, '');\r\n    domain = domain.replace(/\\{AppId\\}/ig, appId)\r\n        .replace(/\\{BucketName\\}/ig, shortBucket)\r\n        .replace(/\\{Bucket\\}/ig, longBucket)\r\n        .replace(/\\{Region\\}/ig, region)\r\n        .replace(/\\{.*?\\}/ig, '');\r\n    if (!/^[a-zA-Z]+:\\/\\//.test(domain)) {\r\n        domain = protocol + '//' + domain;\r\n    }\r\n\r\n    // 去掉域名最后的斜杆\r\n    if (domain.slice(-1) === '/') {\r\n        domain = domain.slice(0, -1);\r\n    }\r\n    var url = domain;\r\n\r\n    if (params.ForcePathStyle) {\r\n        url += '/' + longBucket;\r\n    }\r\n    url += '/';\r\n    if (object) {\r\n        url += util.camSafeUrlEncode(object).replace(/%2F/g, '/');\r\n    }\r\n\r\n    if (params.isLocation) {\r\n        url = url.replace(/^https?:\\/\\//, '');\r\n    }\r\n    return url;\r\n}\r\n\r\n// 异步获取签名\r\nfunction getAuthorizationAsync(params, callback) {\r\n\r\n    var headers = util.clone(params.Headers);\r\n    delete headers['Content-Type'];\r\n    delete headers['Cache-Control'];\r\n    util.each(headers, function (v, k) {\r\n        v === '' && delete headers[k];\r\n    });\r\n\r\n    var cb = function (AuthData) {\r\n\r\n        // 检查签名格式\r\n        var formatAllow = false;\r\n        var auth = AuthData.Authorization;\r\n        if (auth) {\r\n            if (auth.indexOf(' ') > -1) {\r\n                formatAllow = false;\r\n            } else if (auth.indexOf('q-sign-algorithm=') > -1 &&\r\n                auth.indexOf('q-ak=') > -1 &&\r\n                auth.indexOf('q-sign-time=') > -1 &&\r\n                auth.indexOf('q-key-time=') > -1 &&\r\n                auth.indexOf('q-url-param-list=') > -1) {\r\n                formatAllow = true;\r\n            } else {\r\n                try {\r\n                    auth = atob(auth);\r\n                    if (auth.indexOf('a=') > -1 &&\r\n                        auth.indexOf('k=') > -1 &&\r\n                        auth.indexOf('t=') > -1 &&\r\n                        auth.indexOf('r=') > -1 &&\r\n                        auth.indexOf('b=') > -1) {\r\n                        formatAllow = true;\r\n                    }\r\n                } catch (e) {}\r\n            }\r\n        }\r\n        if (formatAllow) {\r\n            callback && callback(null, AuthData);\r\n        } else {\r\n            callback && callback('authorization error');\r\n        }\r\n    };\r\n\r\n    var self = this;\r\n    var Bucket = params.Bucket || '';\r\n    var Region = params.Region || '';\r\n\r\n    // PathName\r\n    var KeyName = params.Key || '';\r\n    if (self.options.ForcePathStyle && Bucket) {\r\n        KeyName = Bucket + '/' + KeyName;\r\n    }\r\n    var Pathname = '/' + KeyName;\r\n\r\n    // Action、ResourceKey\r\n    var StsData = {};\r\n    var Scope = params.Scope;\r\n    if (!Scope) {\r\n        var Action = params.Action || '';\r\n        var ResourceKey = params.ResourceKey || params.Key || '';\r\n        Scope = params.Scope || [{\r\n            action: Action,\r\n            bucket: Bucket,\r\n            region: Region,\r\n            prefix: ResourceKey,\r\n        }];\r\n    }\r\n    var ScopeKey  = util.md5(JSON.stringify(Scope));\r\n\r\n    // STS\r\n    self._StsCache = self._StsCache ||[];\r\n    (function () {\r\n        var i, AuthData;\r\n        for (i = self._StsCache.length - 1; i >= 0; i--) {\r\n            AuthData = self._StsCache[i];\r\n            var compareTime = Math.round(util.getSkewTime(self.options.SystemClockOffset) / 1000) + 30;\r\n            if (AuthData.StartTime && compareTime < AuthData.StartTime || compareTime >= AuthData.ExpiredTime) {\r\n                self._StsCache.splice(i, 1);\r\n                continue;\r\n            }\r\n            if (!AuthData.ScopeLimit || AuthData.ScopeLimit && AuthData.ScopeKey === ScopeKey) {\r\n                StsData = AuthData;\r\n                break;\r\n            }\r\n        }\r\n    })();\r\n\r\n    var calcAuthByTmpKey = function () {\r\n        var KeyTime = StsData.StartTime && StsData.ExpiredTime ? StsData.StartTime + ';' + StsData.ExpiredTime : '';\r\n        var Authorization = util.getAuth({\r\n            SecretId: StsData.TmpSecretId,\r\n            SecretKey: StsData.TmpSecretKey,\r\n            Method: params.Method,\r\n            Pathname: Pathname,\r\n            Query: params.Query,\r\n            Headers: headers,\r\n            Expires: params.Expires,\r\n            UseRawKey: self.options.UseRawKey,\r\n            SystemClockOffset: self.options.SystemClockOffset,\r\n            KeyTime: KeyTime\r\n        });\r\n        var AuthData = {\r\n            Authorization: Authorization,\r\n            XCosSecurityToken: StsData.XCosSecurityToken || '',\r\n            Token: StsData.Token || '',\r\n            ClientIP: StsData.ClientIP || '',\r\n            ClientUA: StsData.ClientUA || '',\r\n        };\r\n        cb(AuthData);\r\n    };\r\n\r\n    // 先判断是否有临时密钥\r\n    if (StsData.ExpiredTime && StsData.ExpiredTime - (util.getSkewTime(self.options.SystemClockOffset) / 1000) > 60) { // 如果缓存的临时密钥有效，并还有超过60秒有效期就直接使用\r\n        calcAuthByTmpKey();\r\n    } else if (self.options.getAuthorization) { // 外部计算签名或获取临时密钥\r\n        self.options.getAuthorization.call(self, {\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Method: params.Method,\r\n            Key: KeyName,\r\n            Pathname: Pathname,\r\n            Query: params.Query,\r\n            Headers: headers,\r\n            Scope: Scope,\r\n        }, function (AuthData) {\r\n            if (typeof AuthData === 'string') {\r\n                AuthData = {Authorization: AuthData};\r\n            }\r\n            if (AuthData.TmpSecretId &&\r\n                AuthData.TmpSecretKey &&\r\n                AuthData.XCosSecurityToken &&\r\n                AuthData.ExpiredTime) {\r\n                StsData = AuthData || {};\r\n                StsData.Scope = Scope;\r\n                StsData.ScopeKey = ScopeKey;\r\n                self._StsCache.push(StsData);\r\n                calcAuthByTmpKey();\r\n            } else {\r\n                cb(AuthData);\r\n            }\r\n        });\r\n    } else if (self.options.getSTS) { // 外部获取临时密钥\r\n        self.options.getSTS.call(self, {\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n        }, function (data) {\r\n            StsData = data || {};\r\n            StsData.Scope = Scope;\r\n            StsData.ScopeKey = ScopeKey;\r\n            StsData.TmpSecretId = StsData.SecretId;\r\n            StsData.TmpSecretKey = StsData.SecretKey;\r\n            self._StsCache.push(StsData);\r\n            calcAuthByTmpKey();\r\n        });\r\n    } else { // 内部计算获取签名\r\n        return (function () {\r\n            var Authorization = util.getAuth({\r\n                SecretId: params.SecretId || self.options.SecretId,\r\n                SecretKey: params.SecretKey || self.options.SecretKey,\r\n                Method: params.Method,\r\n                Pathname: Pathname,\r\n                Query: params.Query,\r\n                Headers: headers,\r\n                Expires: params.Expires,\r\n                UseRawKey: self.options.UseRawKey,\r\n                SystemClockOffset: self.options.SystemClockOffset,\r\n            });\r\n            var AuthData = {\r\n                Authorization: Authorization,\r\n                XCosSecurityToken: self.options.XCosSecurityToken,\r\n            };\r\n            cb(AuthData);\r\n            return AuthData;\r\n        })();\r\n    }\r\n    return '';\r\n}\r\n\r\n// 调整时间偏差\r\nfunction allowRetry(err) {\r\n    var allowRetry = false;\r\n    var isTimeError = false;\r\n    var serverDate = (err.headers && (err.headers.date || err.headers.Date)) || (err.error && err.error.ServerTime);\r\n    try {\r\n        var errorCode = err.error.Code;\r\n        var errorMessage = err.error.Message;\r\n        if (errorCode === 'RequestTimeTooSkewed' ||\r\n            (errorCode === 'AccessDenied' && errorMessage === 'Request has expired')) {\r\n            isTimeError = true;\r\n        }\r\n    } catch (e) {\r\n    }\r\n    if (err) {\r\n        if (isTimeError && serverDate) {\r\n            var serverTime = Date.parse(serverDate);\r\n            if (this.options.CorrectClockSkew && Math.abs(util.getSkewTime(this.options.SystemClockOffset) - serverTime) >= 30000) {\r\n                console.error('error: Local time is too skewed.');\r\n                this.options.SystemClockOffset = serverTime - Date.now();\r\n                allowRetry = true;\r\n            }\r\n        } else if (Math.round(err.statusCode / 100) === 5) {\r\n            allowRetry = true;\r\n        }\r\n    }\r\n    return allowRetry;\r\n}\r\n\r\n// 获取签名并发起请求\r\nfunction submitRequest(params, callback) {\r\n    var self = this;\r\n\r\n    // 处理 headers\r\n    !params.headers && (params.headers = {});\r\n    params.headers['User-Agent'] = self.options.UserAgent || ('cos-nodejs-sdk-v5-' + pkg.version);\r\n\r\n    // 处理 query\r\n    !params.qs && (params.qs = {});\r\n    params.VersionId && (params.qs.versionId = params.VersionId);\r\n    params.qs = util.clearKey(params.qs);\r\n\r\n    // 清理 undefined 和 null 字段\r\n    params.headers && (params.headers = util.clearKey(params.headers));\r\n    params.qs && (params.qs = util.clearKey(params.qs));\r\n\r\n    var Query = util.clone(params.qs);\r\n    params.action && (Query[params.action] = '');\r\n\r\n    var next = function (tryTimes) {\r\n        var oldClockOffset = self.options.SystemClockOffset;\r\n        getAuthorizationAsync.call(self, {\r\n            Bucket: params.Bucket || '',\r\n            Region: params.Region || '',\r\n            Method: params.method,\r\n            Key: params.Key,\r\n            Query: Query,\r\n            Headers: params.headers,\r\n            Action: params.Action,\r\n            ResourceKey: params.ResourceKey,\r\n            Scope: params.Scope,\r\n        }, function (err, AuthData) {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n            params.AuthData = AuthData;\r\n            _submitRequest.call(self, params, function (err, data) {\r\n                if (err && tryTimes < 2 && (oldClockOffset !== self.options.SystemClockOffset || allowRetry.call(self, err))) {\r\n                    if (params.headers) {\r\n                        delete params.headers.Authorization;\r\n                        delete params.headers['token'];\r\n                        delete params.headers['clientIP'];\r\n                        delete params.headers['clientUA'];\r\n                        delete params.headers['x-cos-security-token'];\r\n                    }\r\n                    next(tryTimes + 1);\r\n                } else {\r\n                    callback(err, data);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    next(1);\r\n\r\n}\r\n\r\n// 发起请求\r\nfunction _submitRequest(params, callback) {\r\n    var self = this;\r\n    var TaskId = params.TaskId;\r\n    if (TaskId && !self._isRunningTask(TaskId)) return;\r\n\r\n    var bucket = params.Bucket;\r\n    var region = params.Region;\r\n    var object = params.Key;\r\n    var method = params.method || 'GET';\r\n    var url = params.url;\r\n    var body = params.body;\r\n    var json = params.json;\r\n    var rawBody = params.rawBody;\r\n    var filePath = params.FilePath;\r\n\r\n    // 处理 readStream and body\r\n    var readStream;\r\n    if (body && typeof body.pipe === 'function') {\r\n        readStream = body;\r\n        body = null;\r\n    }\r\n\r\n    // url\r\n    url = url || getUrl({\r\n        ForcePathStyle: self.options.ForcePathStyle,\r\n        protocol: self.options.Protocol,\r\n        domain: self.options.Domain,\r\n        bucket: bucket,\r\n        region: region,\r\n        object: object,\r\n    });\r\n    if (params.action) {\r\n        url = url + '?' + params.action;\r\n    }\r\n\r\n    var opt = {\r\n        method: method,\r\n        url: url,\r\n        headers: params.headers,\r\n        qs: params.qs,\r\n        body: body,\r\n        json: json,\r\n    };\r\n\r\n    // 获取签名\r\n    opt.headers.Authorization = params.AuthData.Authorization;\r\n    params.AuthData.Token && (opt.headers['token'] = params.AuthData.Token);\r\n    params.AuthData.ClientIP && (opt.headers['clientIP'] = params.AuthData.ClientIP);\r\n    params.AuthData.ClientUA && (opt.headers['clientUA'] = params.AuthData.ClientUA);\r\n    params.AuthData.XCosSecurityToken && (opt.headers['x-cos-security-token'] = params.AuthData.XCosSecurityToken);\r\n\r\n    // 清理 undefined 和 null 字段\r\n    opt.headers && (opt.headers = util.clearKey(opt.headers));\r\n    opt = util.clearKey(opt);\r\n\r\n    var Ip = this.options.Ip;\r\n    if (Ip) {\r\n        opt.url = opt.url.replace(/^(https?:\\/\\/)([^\\/]+)/, function (str, pre, Host) {\r\n            opt.headers.Host = Host;\r\n            return pre + Ip;\r\n        });\r\n    }\r\n    if (this.options.StrictSsl !== true) {\r\n        opt.strictSSL = this.options.StrictSsl;\r\n    }\r\n    if (this.options.Proxy) {\r\n        opt.proxy = this.options.Proxy;\r\n    }\r\n    if (this.options.Timeout) {\r\n        opt.timeout = this.options.Timeout;\r\n    }\r\n    if (this.options.KeepAlive) {\r\n        opt.forever = true;\r\n    }\r\n\r\n    // 修复 Content-Type: false 的 Bug，原因 request 模块会获取 request('mime-types).lookup(readStream.path) 作为 Content-Type\r\n    // 问题代码位置：https://github.com/request/request/blob/v2.88.1/request.js#L500\r\n    if (readStream) {\r\n        var hasContentType = false;\r\n        util.each(opt.headers, function (val, key) {\r\n            if (key.toLowerCase() === 'content-type') hasContentType = true;\r\n        });\r\n        if (\r\n            !hasContentType && // 1. not set Content-Type\r\n            readStream.readable && readStream.path && readStream.mode && // 2. isFileReadStream\r\n            !mime.lookup(readStream.path) // 3. mime return false\r\n        ) {\r\n            opt.headers['Content-Type'] = 'application/octet-stream';\r\n        }\r\n    }\r\n\r\n    self.emit('before-send', opt);\r\n    var sender = REQUEST(opt);\r\n    var retResponse;\r\n    var hasReturned;\r\n    var cb = function (err, data) {\r\n        TaskId && self.off('inner-kill-task', killTask);\r\n        if (hasReturned) return;\r\n        hasReturned = true;\r\n        var attrs = {};\r\n        retResponse && retResponse.statusCode && (attrs.statusCode = retResponse.statusCode);\r\n        retResponse && retResponse.headers && (attrs.headers = retResponse.headers);\r\n        if (err) {\r\n            err = util.extend(err || {}, attrs);\r\n            callback(err, null);\r\n        } else {\r\n            data = util.extend(data || {}, attrs);\r\n            callback(null, data);\r\n        }\r\n        if (sender) {\r\n            sender.removeAllListeners && sender.removeAllListeners();\r\n            sender = null;\r\n        }\r\n    };\r\n    var xml2json = function (body) {\r\n        try {\r\n            json = util.xml2json(body) || {};\r\n        } catch (e) {\r\n            json = body || {};\r\n        }\r\n        return json;\r\n    };\r\n    // 在 request 分配的 socket 上挂载 _lastBytesWritten 属性，记录该 socket 已经发送的字节数\r\n    var markLastBytesWritten = function() {\r\n        try {\r\n            Object.defineProperty(sender.req.connection, '_lastBytesWritten', {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n                value: sender.req.connection.bytesWritten\r\n            });\r\n        } catch(e) {\r\n        }\r\n    };\r\n\r\n    sender.on('error', function (err) {\r\n        markLastBytesWritten();\r\n        cb({error: err});\r\n    });\r\n    sender.on('response', function (response) {\r\n        retResponse = response;\r\n        var responseContentLength = response.headers['content-length'] || 0;\r\n        var chunkList = [];\r\n        var statusCode = response.statusCode;\r\n        var statusSuccess = Math.floor(statusCode / 100) === 2; // 200 202 204 206\r\n        if (statusSuccess && params.outputStream) {\r\n            sender.on('end', function () {\r\n                cb(null, {});\r\n            });\r\n        } else if (responseContentLength >= process.binding('buffer').kMaxLength && opt.method !== 'HEAD') {\r\n            cb({error: 'file size large than ' + process.binding('buffer').kMaxLength + ', please use \"Output\" Stream to getObject.'});\r\n        } else {\r\n            var dataHandler = function (chunk) {\r\n                chunkList.push(chunk);\r\n            };\r\n            var endHandler = function () {\r\n                var json;\r\n                try {\r\n                    var body = Buffer.concat(chunkList);\r\n                } catch (e) {\r\n                    cb({error: e});\r\n                    return;\r\n                }\r\n                var bodyStr = body.toString();\r\n                if (statusSuccess) {\r\n                    if (rawBody) { // 不对 body 进行转换，body 直接挂载返回\r\n                        cb(null, {body: body});\r\n                    } else if (body.length) {\r\n                        json = xml2json(body.toString());\r\n                        if (json && json.Error) {\r\n                            cb({error: json.Error});\r\n                        } else {\r\n                            cb(null, json);\r\n                        }\r\n                    } else {\r\n                        cb(null, {});\r\n                    }\r\n                } else {\r\n                    bodyStr && (json = xml2json(bodyStr));\r\n                    cb({error: json && json.Error || response.statusMessage || 'statusCode error'});\r\n                }\r\n                chunkList = null;\r\n            };\r\n            sender.on('data', dataHandler);\r\n            sender.on('end', endHandler);\r\n        }\r\n    });\r\n\r\n    // kill task\r\n    var killTask = function (data) {\r\n        if (data.TaskId === TaskId) {\r\n            readStream && readStream.isSdkCreated && readStream.close && readStream.close(); // 如果是 SDK 里从 FilePath 创建的读流，要主动取消\r\n            sender && sender.abort && sender.abort();\r\n            self.off('inner-kill-task', killTask);\r\n        }\r\n    };\r\n    TaskId && self.on('inner-kill-task', killTask);\r\n\r\n    // 请求结束时，在 request 分配的 socket 上挂载 _lastBytesWritten 属性，记录该 socket 已经发送的字节数\r\n    sender.once('end', function() {\r\n        markLastBytesWritten();\r\n    });\r\n\r\n    // upload progress\r\n    if (params.onProgress && typeof params.onProgress === 'function') {\r\n        var contentLength = opt.headers['Content-Length'];\r\n        var time0 = Date.now();\r\n        var size0 = 0;\r\n        sender.on('drain', function () {\r\n            var time1 = Date.now();\r\n            var loaded = 0;\r\n            try {\r\n                // 已经上传的字节数 = socket当前累计发送的字节数 - 头部长度 - socket以前发送的字节数\r\n                loaded = sender.req.connection.bytesWritten - sender.req._header.length - (sender.req.connection._lastBytesWritten || 0);\r\n            } catch (e) {\r\n            }\r\n            var total = contentLength;\r\n            var speed = parseInt((loaded - size0) / ((time1 - time0) / 1000) * 100) / 100;\r\n            var percent = total ? (parseInt(loaded / total * 100) / 100) : 0;\r\n            time0 = time1;\r\n            size0 = loaded;\r\n            params.onProgress({\r\n                loaded: loaded,\r\n                total: total,\r\n                speed: speed,\r\n                percent: percent,\r\n            });\r\n        });\r\n    }\r\n    // download progress\r\n    if (params.onDownloadProgress && typeof params.onDownloadProgress === 'function') {\r\n        var time0 = Date.now();\r\n        var size0 = 0;\r\n        var loaded = 0;\r\n        var total = 0;\r\n        sender.on('response', function (res) {\r\n            total = res.headers['content-length'];\r\n            sender.on('data', function (chunk) {\r\n                loaded += chunk.length;\r\n                var time1 = Date.now();\r\n                var speed = parseInt((loaded - size0) / ((time1 - time0) / 1000) * 100) / 100;\r\n                var percent = total ? (parseInt(loaded / total * 100) / 100) : 0;\r\n                time0 = time1;\r\n                size0 = loaded;\r\n                params.onDownloadProgress({\r\n                    loaded: loaded,\r\n                    total: total,\r\n                    speed: speed,\r\n                    percent: percent,\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // pipe 输入\r\n    if (readStream) {\r\n        readStream.on('error', function (err) {\r\n            sender && sender.abort && sender.abort();\r\n            cb(err);\r\n        });\r\n        readStream.pipe(sender);\r\n    }\r\n    // pipe 输出\r\n    if (params.outputStream) {\r\n        params.outputStream.on('error', function (err) {\r\n            sender && sender.abort && sender.abort();\r\n            cb(err)\r\n        });\r\n        sender.pipe(params.outputStream);\r\n    }\r\n\r\n    return sender;\r\n\r\n}\r\n\r\n\r\nvar API_MAP = {\r\n    // Bucket 相关方法\r\n    getService: getService,                       // Bucket\r\n    putBucket: putBucket,\r\n    headBucket: headBucket,\r\n    getBucket: getBucket,\r\n    deleteBucket: deleteBucket,\r\n    putBucketAcl: putBucketAcl,                  // BucketACL\r\n    getBucketAcl: getBucketAcl,\r\n    putBucketCors: putBucketCors,                // BucketCors\r\n    getBucketCors: getBucketCors,\r\n    deleteBucketCors: deleteBucketCors,\r\n    getBucketLocation: getBucketLocation,        // BucketLocation\r\n    getBucketPolicy: getBucketPolicy,            // BucketPolicy\r\n    putBucketPolicy: putBucketPolicy,\r\n    deleteBucketPolicy: deleteBucketPolicy,\r\n    putBucketTagging: putBucketTagging,          // BucketTagging\r\n    getBucketTagging: getBucketTagging,\r\n    deleteBucketTagging: deleteBucketTagging,\r\n    putBucketLifecycle: putBucketLifecycle,      // BucketLifecycle\r\n    getBucketLifecycle: getBucketLifecycle,\r\n    deleteBucketLifecycle: deleteBucketLifecycle,\r\n    putBucketVersioning: putBucketVersioning,    // BucketVersioning\r\n    getBucketVersioning: getBucketVersioning,\r\n    putBucketReplication: putBucketReplication,  // BucketReplication\r\n    getBucketReplication: getBucketReplication,\r\n    deleteBucketReplication: deleteBucketReplication,\r\n    putBucketWebsite: putBucketWebsite,          // BucketWebsite\r\n    getBucketWebsite: getBucketWebsite,\r\n    deleteBucketWebsite: deleteBucketWebsite,\r\n    putBucketReferer: putBucketReferer,          // BucketReferer\r\n    getBucketReferer: getBucketReferer,\r\n\r\n    // Object 相关方法\r\n    getObject: getObject,\r\n    headObject: headObject,\r\n    listObjectVersions: listObjectVersions,\r\n    putObject: putObject,\r\n    deleteObject: deleteObject,\r\n    getObjectAcl: getObjectAcl,\r\n    putObjectAcl: putObjectAcl,\r\n    optionsObject: optionsObject,\r\n    putObjectCopy: putObjectCopy,\r\n    deleteMultipleObject: deleteMultipleObject,\r\n    restoreObject: restoreObject,\r\n\r\n    // 分块上传相关方法\r\n    uploadPartCopy: uploadPartCopy,\r\n    multipartInit: multipartInit,\r\n    multipartUpload: multipartUpload,\r\n    multipartComplete: multipartComplete,\r\n    multipartList: multipartList,\r\n    multipartListPart: multipartListPart,\r\n    multipartAbort: multipartAbort,\r\n\r\n    // 工具方法\r\n    getObjectUrl: getObjectUrl,\r\n    getAuth: getAuth,\r\n    getV4Auth: getV4Auth,\r\n};\r\n\r\nfunction warnOldApi(apiName, fn, proto) {\r\n    util.each(['Cors', 'Acl'], function (suffix) {\r\n        if (apiName.slice(-suffix.length) === suffix) {\r\n            var oldName = apiName.slice(0, -suffix.length) + suffix.toUpperCase();\r\n            var apiFn = util.apiWrapper(apiName, fn);\r\n            var warned = false;\r\n            proto[oldName] = function () {\r\n                !warned && console.warn('warning: cos.' + oldName + ' has been deprecated. Please Use cos.' + apiName + ' instead.');\r\n                warned = true;\r\n                apiFn.apply(this, arguments);\r\n            };\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.init = function (COS, task) {\r\n    task.transferToTaskMethod(API_MAP, 'putObject');\r\n    util.each(API_MAP, function (fn, apiName) {\r\n        COS.prototype[apiName] = util.apiWrapper(apiName, fn);\r\n        warnOldApi(apiName, fn, COS.prototype);\r\n    });\r\n};\r\n","module.exports = {\n  \"_from\": \"cos-nodejs-sdk-v5@^2.5.20\",\n  \"_id\": \"cos-nodejs-sdk-v5@2.5.20\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-KaDhM9yGwk1ha4l8GrDtZVXM0dI1bJ8tkHnsogGdrBTwBFcHc0oTnV2mpBkhDx1Zo6LCOVVgTXTuftZUqqki/A==\",\n  \"_location\": \"/cos-nodejs-sdk-v5\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"cos-nodejs-sdk-v5@^2.5.20\",\n    \"name\": \"cos-nodejs-sdk-v5\",\n    \"escapedName\": \"cos-nodejs-sdk-v5\",\n    \"rawSpec\": \"^2.5.20\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.5.20\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/cos-nodejs-sdk-v5/-/cos-nodejs-sdk-v5-2.5.20.tgz\",\n  \"_shasum\": \"1f3c8db8a0e5c1b4c9901084718cfcf66aaa0016\",\n  \"_spec\": \"cos-nodejs-sdk-v5@^2.5.20\",\n  \"_where\": \"/Users/hoolai/Documents/tyz/zhiqiu/meng/zhiqiu_meng_wx_frontend\",\n  \"author\": {\n    \"name\": \"carsonxu\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/tencentyun/cos-nodejs-sdk-v5/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"configstore\": \"^3.1.2\",\n    \"mime-types\": \"^2.1.24\",\n    \"request\": \"^2.88.0\",\n    \"xml2js\": \"^0.4.19\"\n  },\n  \"deprecated\": false,\n  \"description\": \"cos nodejs sdk v5\",\n  \"devDependencies\": {\n    \"mocha\": \"^4.0.1\",\n    \"qcloud-cos-sts\": \"^3.0.0\"\n  },\n  \"homepage\": \"https://github.com/tencentyun/cos-nodejs-sdk-v5#readme\",\n  \"keywords\": [\n    \"tencent\",\n    \"tencent cloud\",\n    \"qcloud\",\n    \"cos\",\n    \"cos-sdk\"\n  ],\n  \"license\": \"ISC\",\n  \"main\": \"index.js\",\n  \"name\": \"cos-nodejs-sdk-v5\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/tencentyun/cos-nodejs-sdk-v5.git\"\n  },\n  \"scripts\": {\n    \"csp\": \"mocha test/csp.js\",\n    \"demo\": \"node demo/demo.js\",\n    \"demo-sts\": \"node demo/demo-sts.js\",\n    \"demo-sts-scope\": \"node demo/demo-sts-scope.js\",\n    \"test\": \"mocha test/test.js\"\n  },\n  \"version\": \"2.5.20\"\n}\n","var fs = require('fs');\r\nvar Async = require('./async');\r\nvar EventProxy = require('./event').EventProxy;\r\nvar util = require('./util');\r\n\r\n// 文件分块上传全过程，暴露的分块上传接口\r\nfunction sliceUploadFile(params, callback) {\r\n    var self = this;\r\n    var ep = new EventProxy();\r\n    var TaskId = params.TaskId;\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var FilePath = params.FilePath;\r\n    var ChunkSize = params.ChunkSize || params.SliceSize || self.options.ChunkSize;\r\n    var AsyncLimit = params.AsyncLimit;\r\n    var StorageClass = params.StorageClass || 'Standard';\r\n    var ServerSideEncryption = params.ServerSideEncryption;\r\n    var FileSize;\r\n\r\n    var onProgress;\r\n    var onHashProgress = params.onHashProgress;\r\n\r\n    // 上传过程中出现错误，返回错误\r\n    ep.on('error', function (err) {\r\n        if (!self._isRunningTask(TaskId)) return;\r\n        return callback(err);\r\n    });\r\n\r\n    // 上传分块完成，开始 uploadSliceComplete 操作\r\n    ep.on('upload_complete', function (UploadCompleteData) {\r\n        callback(null, UploadCompleteData);\r\n    });\r\n\r\n    // 上传分块完成，开始 uploadSliceComplete 操作\r\n    ep.on('upload_slice_complete', function (UploadData) {\r\n        uploadSliceComplete.call(self, {\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            UploadId: UploadData.UploadId,\r\n            SliceList: UploadData.SliceList,\r\n        }, function (err, data) {\r\n            if (!self._isRunningTask(TaskId)) return;\r\n            delete uploadIdUsing[UploadData.UploadId];\r\n            if (err) {\r\n                onProgress(null, true);\r\n                return ep.emit('error', err);\r\n            }\r\n            onProgress({loaded: FileSize, total: FileSize}, true);\r\n            removeUploadId.call(self, UploadData.UploadId);\r\n            ep.emit('upload_complete', data);\r\n        });\r\n    });\r\n\r\n    // 获取 UploadId 完成，开始上传每个分片\r\n    ep.on('get_upload_data_finish', function (UploadData) {\r\n\r\n        // 处理 UploadId 缓存\r\n        var uuid = util.getFileUUID(params.FileStat, params.ChunkSize);\r\n        uuid && setUploadId.call(self, uuid, UploadData.UploadId); // 缓存 UploadId\r\n        uploadIdUsing[UploadData.UploadId] = true; // 标记 UploadId 为正在使用\r\n        TaskId && self.on('inner-kill-task', function (data) {\r\n            if (data.TaskId === TaskId && data.toState === 'canceled') {\r\n                delete uploadIdUsing[UploadData.UploadId]; // 去除 UploadId 正在使用的标记\r\n            }\r\n        });\r\n\r\n        // 获取 UploadId\r\n        onProgress(null, true); // 任务状态开始 uploading\r\n        uploadSliceList.call(self, {\r\n            TaskId: TaskId,\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            FilePath: FilePath,\r\n            FileSize: FileSize,\r\n            SliceSize: ChunkSize,\r\n            AsyncLimit: AsyncLimit,\r\n            ServerSideEncryption: ServerSideEncryption,\r\n            UploadData: UploadData,\r\n            onProgress: onProgress\r\n        }, function (err, data) {\r\n            if (!self._isRunningTask(TaskId)) return;\r\n            if (err) {\r\n                onProgress(null, true);\r\n                return ep.emit('error', err);\r\n            }\r\n            ep.emit('upload_slice_complete', data);\r\n        });\r\n    });\r\n\r\n    // 开始获取文件 UploadId，里面会视情况计算 ETag，并比对，保证文件一致性，也优化上传\r\n    ep.on('get_file_size_finish', function () {\r\n\r\n        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\r\n\r\n        if (params.UploadData.UploadId) {\r\n            ep.emit('get_upload_data_finish', params.UploadData);\r\n        } else {\r\n            var _params = util.extend({\r\n                TaskId: TaskId,\r\n                Bucket: Bucket,\r\n                Region: Region,\r\n                Key: Key,\r\n                Headers: params.Headers,\r\n                StorageClass: StorageClass,\r\n                FilePath: FilePath,\r\n                FileSize: FileSize,\r\n                SliceSize: ChunkSize,\r\n                onHashProgress: onHashProgress,\r\n            }, params);\r\n            getUploadIdAndPartList.call(self, _params, function (err, UploadData) {\r\n                if (!self._isRunningTask(TaskId)) return;\r\n                if (err) return ep.emit('error', err);\r\n                params.UploadData.UploadId = UploadData.UploadId;\r\n                params.UploadData.PartList = UploadData.PartList;\r\n                ep.emit('get_upload_data_finish', params.UploadData);\r\n            });\r\n        }\r\n    });\r\n\r\n    // 获取上传文件大小\r\n    FileSize = params.ContentLength;\r\n    delete params.ContentLength;\r\n    !params.Headers && (params.Headers = {});\r\n    util.each(params.Headers, function (item, key) {\r\n        if (key.toLowerCase() === 'content-length') {\r\n            delete params.Headers[key];\r\n        }\r\n    });\r\n\r\n    // 控制分片大小\r\n    (function () {\r\n        var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\r\n        var AutoChunkSize = 1024 * 1024;\r\n        for (var i = 0; i < SIZE.length; i++) {\r\n            AutoChunkSize = SIZE[i] * 1024 * 1024;\r\n            if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\r\n        }\r\n        params.ChunkSize = params.SliceSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\r\n    })();\r\n\r\n    // 开始上传\r\n    if (FileSize === 0) {\r\n        params.Body = '';\r\n        params.ContentLength = 0;\r\n        params.SkipTask = true;\r\n        self.putObject(params, function (err, data) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            callback(null, data);\r\n        });\r\n    } else {\r\n        ep.emit('get_file_size_finish');\r\n    }\r\n\r\n}\r\n\r\n\r\n// 按照文件特征值，缓存 UploadId\r\nvar uploadIdCache;\r\nvar uploadIdUsing = {};\r\nvar uploadIdCacheKey = 'cos_sdk_upload_cache';\r\nfunction initUploadId() {\r\n    var cacheLimit = this.options.UploadIdCacheLimit;\r\n    if (!uploadIdCache) {\r\n        if (cacheLimit) {\r\n            try {\r\n                uploadIdCache = JSON.parse(util.localStorage.getItem(uploadIdCacheKey)) || [];\r\n            } catch (e) {}\r\n        }\r\n        if (!uploadIdCache) {\r\n            uploadIdCache = [];\r\n        }\r\n    }\r\n}\r\nfunction setUploadId(uuid, UploadId, isDisabled) {\r\n    initUploadId.call(this);\r\n    uuid = uuid || '';\r\n    var part1 = uuid.substr(0, uuid.indexOf('-') + 1);\r\n    for (var i = uploadIdCache.length - 1; i >= 0; i--) {\r\n        var item = uploadIdCache[i];\r\n        if (item[0] === uuid && item[1] === UploadId) {\r\n            uploadIdCache.splice(i, 1);\r\n        } else if (uuid !== item[0] && item[0].indexOf(part1) === 0) { // 文件路径相同，但其他信息不同，说明文件改变了，清理掉\r\n            uploadIdCache.splice(i, 1);\r\n        }\r\n    }\r\n    uploadIdCache.unshift([uuid, UploadId]);\r\n    var cacheLimit = this.options.UploadIdCacheLimit;\r\n    if (uploadIdCache.length > cacheLimit) {\r\n        uploadIdCache.splice(cacheLimit);\r\n    }\r\n    cacheLimit && setTimeout(function () {\r\n        try {\r\n            util.localStorage.setItem(uploadIdCacheKey, JSON.stringify(uploadIdCache));\r\n        } catch (e) {}\r\n    });\r\n}\r\nfunction removeUploadId(UploadId) {\r\n    initUploadId.call(this);\r\n    delete uploadIdUsing[UploadId];\r\n    for (var i = uploadIdCache.length - 1; i >= 0; i--) {\r\n        if (uploadIdCache[i][1] === UploadId) {\r\n            uploadIdCache.splice(i, 1)\r\n        }\r\n    }\r\n    var cacheLimit = this.options.UploadIdCacheLimit;\r\n    if (uploadIdCache.length > cacheLimit) {\r\n        uploadIdCache.splice(cacheLimit);\r\n    }\r\n    cacheLimit && setTimeout(function () {\r\n        try {\r\n            if (uploadIdCache.length) {\r\n                util.localStorage.setItem(uploadIdCacheKey, JSON.stringify(uploadIdCache));\r\n            } else {\r\n                util.localStorage.removeItem(uploadIdCacheKey);\r\n            }\r\n        } catch (e) {}\r\n    });\r\n}\r\nfunction getUploadId(uuid) {\r\n    initUploadId.call(this);\r\n    var CacheUploadIdList = [];\r\n    for (var i = 0; i < uploadIdCache.length; i++) {\r\n        if (uploadIdCache[i][0] === uuid) {\r\n            CacheUploadIdList.push(uploadIdCache[i][1]);\r\n        }\r\n    }\r\n    return CacheUploadIdList.length ? CacheUploadIdList : null;\r\n}\r\n\r\n// 获取上传任务的 UploadId\r\nfunction getUploadIdAndPartList(params, callback) {\r\n    var TaskId = params.TaskId;\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var StorageClass = params.StorageClass;\r\n    var self = this;\r\n\r\n    // 计算 ETag\r\n    var ETagMap = {};\r\n    var FileSize = params.FileSize;\r\n    var SliceSize = params.SliceSize;\r\n    var SliceCount = Math.ceil(FileSize / SliceSize);\r\n    var FinishSliceCount = 0;\r\n    var FinishSize = 0;\r\n    var onHashProgress = util.throttleOnProgress.call(self, FileSize, params.onHashProgress);\r\n    var getChunkETag = function (PartNumber, callback) {\r\n        var start = SliceSize * (PartNumber - 1);\r\n        var end = Math.min(start + SliceSize, FileSize);\r\n        var ChunkSize = end - start;\r\n\r\n        if (ETagMap[PartNumber]) {\r\n            callback(null, {\r\n                PartNumber: PartNumber,\r\n                ETag: ETagMap[PartNumber],\r\n                Size: ChunkSize\r\n            });\r\n        } else {\r\n            util.fileSlice(params.FilePath, start, end, function (chunkItem) {\r\n                util.getFileMd5(chunkItem, function (err, md5) {\r\n                    if (err) return callback(err);\r\n                    var ETag = '\"' + md5 + '\"';\r\n                    ETagMap[PartNumber] = ETag;\r\n                    FinishSliceCount += 1;\r\n                    FinishSize += ChunkSize;\r\n                    callback(err, {\r\n                        PartNumber: PartNumber,\r\n                        ETag: ETag,\r\n                        Size: ChunkSize\r\n                    });\r\n                    onHashProgress({loaded: FinishSize, total: FileSize});\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    // 通过和文件的 md5 对比，判断 UploadId 是否可用\r\n    var isAvailableUploadList = function (PartList, callback) {\r\n        var PartCount = PartList.length;\r\n        // 如果没有分片，通过\r\n        if (PartCount === 0) {\r\n            return callback(null, true);\r\n        }\r\n        // 检查分片数量\r\n        if (PartCount > SliceCount) {\r\n            return callback(null, false);\r\n        }\r\n        // 检查分片大小\r\n        if (PartCount > 1) {\r\n            var PartSliceSize = Math.max(PartList[0].Size, PartList[1].Size);\r\n            if (PartSliceSize !== SliceSize) {\r\n                return callback(null, false);\r\n            }\r\n        }\r\n        // 逐个分片计算并检查 ETag 是否一致\r\n        var next = function (index) {\r\n            if (index < PartCount) {\r\n                var Part = PartList[index];\r\n                getChunkETag(Part.PartNumber, function (err, chunk) {\r\n                    if (chunk && chunk.ETag === Part.ETag && chunk.Size === Part.Size) {\r\n                        next(index + 1);\r\n                    } else {\r\n                        callback(null, false);\r\n                    }\r\n                });\r\n            } else {\r\n                callback(null, true);\r\n            }\r\n        };\r\n        next(0);\r\n    };\r\n\r\n    var ep = new EventProxy();\r\n    ep.on('error', function (errData) {\r\n        if (!self._isRunningTask(TaskId)) return;\r\n        return callback(errData);\r\n    });\r\n\r\n    // 存在 UploadId\r\n    ep.on('upload_id_ready', function (UploadData) {\r\n        // 转换成 map\r\n        var map = {};\r\n        var list = [];\r\n        util.each(UploadData.PartList, function (item) {\r\n            map[item.PartNumber] = item;\r\n        });\r\n        for (var PartNumber = 1; PartNumber <= SliceCount; PartNumber++) {\r\n            var item = map[PartNumber];\r\n            if (item) {\r\n                item.PartNumber = PartNumber;\r\n                item.Uploaded = true;\r\n            } else {\r\n                item = {\r\n                    PartNumber: PartNumber,\r\n                    ETag: null,\r\n                    Uploaded: false\r\n                };\r\n            }\r\n            list.push(item);\r\n        }\r\n        UploadData.PartList = list;\r\n        callback(null, UploadData);\r\n    });\r\n\r\n    // 不存在 UploadId, 初始化生成 UploadId\r\n    ep.on('no_available_upload_id', function () {\r\n        if (!self._isRunningTask(TaskId)) return;\r\n        var _params = util.extend({\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            Headers: util.clone(params.Headers),\r\n            StorageClass: StorageClass,\r\n        }, params);\r\n        self.multipartInit(_params, function (err, data) {\r\n            if (!self._isRunningTask(TaskId)) return;\r\n            if (err) return ep.emit('error', err);\r\n            var UploadId = data.UploadId;\r\n            if (!UploadId) {\r\n                return callback({Message: 'no upload id'});\r\n            }\r\n            ep.emit('upload_id_ready', {UploadId: UploadId, PartList: []});\r\n        });\r\n    });\r\n\r\n    // 如果已存在 UploadId，找一个可以用的 UploadId\r\n    ep.on('has_upload_id', function (UploadIdList) {\r\n        // 串行地，找一个内容一致的 UploadId\r\n        UploadIdList = UploadIdList.reverse();\r\n        Async.eachLimit(UploadIdList, 1, function (UploadId, asyncCallback) {\r\n            if (!self._isRunningTask(TaskId)) return;\r\n            // 如果正在上传，跳过\r\n            if (uploadIdUsing[UploadId]) {\r\n                asyncCallback(); // 检查下一个 UploadId\r\n                return;\r\n            }\r\n            // 判断 UploadId 是否可用\r\n            wholeMultipartListPart.call(self, {\r\n                Bucket: Bucket,\r\n                Region: Region,\r\n                Key: Key,\r\n                UploadId: UploadId,\r\n            }, function (err, PartListData) {\r\n                if (!self._isRunningTask(TaskId)) return;\r\n                if (err) {\r\n                    removeUploadId.call(self, UploadId);\r\n                    return ep.emit('error', err);\r\n                }\r\n                var PartList = PartListData.PartList;\r\n                PartList.forEach(function (item) {\r\n                    item.PartNumber *= 1;\r\n                    item.Size *= 1;\r\n                    item.ETag = item.ETag || '';\r\n                });\r\n                isAvailableUploadList(PartList, function (err, isAvailable) {\r\n                    if (!self._isRunningTask(TaskId)) return;\r\n                    if (err) return ep.emit('error', err);\r\n                    if (isAvailable) {\r\n                        asyncCallback({\r\n                            UploadId: UploadId,\r\n                            PartList: PartList\r\n                        }); // 马上结束\r\n                    } else {\r\n                        asyncCallback(); // 检查下一个 UploadId\r\n                    }\r\n                });\r\n            });\r\n        }, function (AvailableUploadData) {\r\n            if (!self._isRunningTask(TaskId)) return;\r\n            onHashProgress(null, true);\r\n            if (AvailableUploadData && AvailableUploadData.UploadId) {\r\n                ep.emit('upload_id_ready', AvailableUploadData);\r\n            } else {\r\n                ep.emit('no_available_upload_id');\r\n            }\r\n        });\r\n    });\r\n\r\n    // 在本地缓存找可用的 UploadId\r\n    ep.on('seek_local_avail_upload_id', function (RemoteUploadIdList) {\r\n        // 在本地找可用的 UploadId\r\n        var uuid = util.getFileUUID(params.FileStat, params.ChunkSize), LocalUploadIdList;\r\n        if (uuid && (LocalUploadIdList = getUploadId.call(self, uuid))) {\r\n            var next = function (index) {\r\n                // 如果本地找不到可用 UploadId，再一个个遍历校验远端\r\n                if (index >= LocalUploadIdList.length) {\r\n                    ep.emit('has_upload_id', RemoteUploadIdList);\r\n                    return;\r\n                }\r\n                var UploadId = LocalUploadIdList[index];\r\n                // 如果不在远端 UploadId 列表里，跳过并删除\r\n                if (!util.isInArray(RemoteUploadIdList, UploadId)) {\r\n                    removeUploadId.call(self, UploadId);\r\n                    next(index + 1);\r\n                    return;\r\n                }\r\n                // 如果正在上传，跳过\r\n                if (uploadIdUsing[UploadId]) {\r\n                    next(index + 1);\r\n                    return;\r\n                }\r\n                // 判断 UploadId 是否存在线上\r\n                wholeMultipartListPart.call(self, {\r\n                    Bucket: Bucket,\r\n                    Region: Region,\r\n                    Key: Key,\r\n                    UploadId: UploadId,\r\n                }, function (err, PartListData) {\r\n                    if (!self._isRunningTask(TaskId)) return;\r\n                    if (err) {\r\n                        removeUploadId.call(self, UploadId);\r\n                        next(index + 1);\r\n                    } else {\r\n                        // 找到可用 UploadId\r\n                        ep.emit('upload_id_ready', {\r\n                            UploadId: UploadId,\r\n                            PartList: PartListData.PartList,\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n            next(0);\r\n        } else {\r\n            ep.emit('has_upload_id', RemoteUploadIdList);\r\n        }\r\n    });\r\n\r\n    // 获取线上 UploadId 列表\r\n    ep.on('get_remote_upload_id_list', function (RemoteUploadIdList) {\r\n        // 获取符合条件的 UploadId 列表，因为同一个文件可以有多个上传任务。\r\n        wholeMultipartList.call(self, {\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n        }, function (err, data) {\r\n            if (!self._isRunningTask(TaskId)) return;\r\n            if (err) {\r\n                return ep.emit('error', err);\r\n            }\r\n            // 整理远端 UploadId 列表\r\n            var RemoteUploadIdList = util.filter(data.UploadList, function (item) {\r\n                return item.Key === Key && (!StorageClass || item.StorageClass.toUpperCase() === StorageClass.toUpperCase());\r\n            }).reverse().map(function (item) {\r\n                return item.UploadId || item.UploadID;\r\n            });\r\n            if (RemoteUploadIdList.length) {\r\n                ep.emit('seek_local_avail_upload_id', RemoteUploadIdList);\r\n            } else {\r\n                var uuid = util.getFileUUID(params.FileStat, params.ChunkSize), LocalUploadIdList;\r\n                if (uuid && (LocalUploadIdList = getUploadId.call(self, uuid))) {\r\n                    util.each(LocalUploadIdList, function (UploadId) {\r\n                        removeUploadId.call(self, UploadId);\r\n                    });\r\n                }\r\n                ep.emit('no_available_upload_id');\r\n            }\r\n        });\r\n    });\r\n\r\n    // 开始找可用 UploadId\r\n    ep.emit('get_remote_upload_id_list');\r\n\r\n}\r\n\r\n// 获取符合条件的全部上传任务 (条件包括 Bucket, Region, Prefix)\r\nfunction wholeMultipartList(params, callback) {\r\n    var self = this;\r\n    var UploadList = [];\r\n    var sendParams = {\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Prefix: params.Key\r\n    };\r\n    var next = function () {\r\n        self.multipartList(sendParams, function (err, data) {\r\n            if (err) return callback(err);\r\n            UploadList.push.apply(UploadList, data.Upload || []);\r\n            if (data.IsTruncated === 'true') { // 列表不完整\r\n                sendParams.KeyMarker = data.NextKeyMarker;\r\n                sendParams.UploadIdMarker = data.NextUploadIdMarker;\r\n                next();\r\n            } else {\r\n                callback(null, {UploadList: UploadList});\r\n            }\r\n        });\r\n    };\r\n    next();\r\n}\r\n\r\n// 获取指定上传任务的分块列表\r\nfunction wholeMultipartListPart(params, callback) {\r\n    var self = this;\r\n    var PartList = [];\r\n    var sendParams = {\r\n        Bucket: params.Bucket,\r\n        Region: params.Region,\r\n        Key: params.Key,\r\n        UploadId: params.UploadId\r\n    };\r\n    var next = function () {\r\n        self.multipartListPart(sendParams, function (err, data) {\r\n            if (err) return callback(err);\r\n            PartList.push.apply(PartList, data.Part || []);\r\n            if (data.IsTruncated === 'true') { // 列表不完整\r\n                sendParams.PartNumberMarker = data.NextPartNumberMarker;\r\n                next();\r\n            } else {\r\n                callback(null, {PartList: PartList});\r\n            }\r\n        });\r\n    };\r\n    next();\r\n}\r\n\r\n// 上传文件分块，包括\r\n/*\r\n UploadId (上传任务编号)\r\n AsyncLimit (并发量)，\r\n SliceList (上传的分块数组)，\r\n FilePath (本地文件的位置)，\r\n SliceSize (文件分块大小)\r\n FileSize (文件大小)\r\n onProgress (上传成功之后的回调函数)\r\n */\r\nfunction uploadSliceList(params, cb) {\r\n    var self = this;\r\n    var TaskId = params.TaskId;\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var UploadData = params.UploadData;\r\n    var FileSize = params.FileSize;\r\n    var SliceSize = params.SliceSize;\r\n    var ChunkParallel = Math.min(params.AsyncLimit || self.options.ChunkParallelLimit || 1, 256);\r\n    var FilePath = params.FilePath;\r\n    var SliceCount = Math.ceil(FileSize / SliceSize);\r\n    var FinishSize = 0;\r\n    var ServerSideEncryption = params.ServerSideEncryption;\r\n    var needUploadSlices = util.filter(UploadData.PartList, function (SliceItem) {\r\n        if (SliceItem['Uploaded']) {\r\n            FinishSize += SliceItem['PartNumber'] >= SliceCount ? (FileSize % SliceSize || SliceSize) : SliceSize;\r\n        }\r\n        return !SliceItem['Uploaded'];\r\n    });\r\n    var onProgress = params.onProgress;\r\n\r\n    Async.eachLimit(needUploadSlices, ChunkParallel, function (SliceItem, asyncCallback) {\r\n        if (!self._isRunningTask(TaskId)) return;\r\n        var PartNumber = SliceItem['PartNumber'];\r\n        var currentSize = Math.min(FileSize, SliceItem['PartNumber'] * SliceSize) - (SliceItem['PartNumber'] - 1) * SliceSize;\r\n        var preAddSize = 0;\r\n        uploadSliceItem.call(self, {\r\n            TaskId: TaskId,\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            SliceSize: SliceSize,\r\n            FileSize: FileSize,\r\n            PartNumber: PartNumber,\r\n            ServerSideEncryption: ServerSideEncryption,\r\n            FilePath: FilePath,\r\n            UploadData: UploadData,\r\n            onProgress: function (data) {\r\n                FinishSize += data.loaded - preAddSize;\r\n                preAddSize = data.loaded;\r\n                onProgress({loaded: FinishSize, total: FileSize});\r\n            },\r\n        }, function (err, data) {\r\n            if (!self._isRunningTask(TaskId)) return;\r\n            if (util.isBrowser && !err && !data.ETag) {\r\n                err = 'get ETag error, please add \"ETag\" to CORS ExposeHeader setting.';\r\n            }\r\n            if (err) {\r\n                FinishSize -= preAddSize;\r\n            } else {\r\n                FinishSize += currentSize - preAddSize;\r\n                SliceItem.ETag = data.ETag;\r\n            }\r\n            asyncCallback(err || null, data);\r\n        });\r\n    }, function (err) {\r\n        if (!self._isRunningTask(TaskId)) return;\r\n        if (err)  return cb(err);\r\n        cb(null, {\r\n            UploadId: UploadData.UploadId,\r\n            SliceList: UploadData.PartList\r\n        });\r\n    });\r\n}\r\n\r\n// 上传指定分片\r\nfunction uploadSliceItem(params, callback) {\r\n    var self = this;\r\n    var TaskId = params.TaskId;\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var FileSize = params.FileSize;\r\n    var FilePath = params.FilePath;\r\n    var PartNumber = params.PartNumber * 1;\r\n    var SliceSize = params.SliceSize;\r\n    var ServerSideEncryption = params.ServerSideEncryption;\r\n    var UploadData = params.UploadData;\r\n    var ChunkRetryTimes = self.options.ChunkRetryTimes + 1;\r\n\r\n    var start = SliceSize * (PartNumber - 1);\r\n\r\n    var ContentLength = SliceSize;\r\n\r\n    var end = start + SliceSize;\r\n\r\n    if (end > FileSize) {\r\n        end = FileSize;\r\n        ContentLength = end - start;\r\n    }\r\n\r\n    util.fileSlice(FilePath, start, end, function (md5Body) {\r\n        util.getFileMd5(md5Body, function (err, md5) {\r\n            var contentMd5 = md5 ? util.binaryBase64(md5) : '';\r\n            var PartItem = UploadData.PartList[PartNumber - 1];\r\n            Async.retry(ChunkRetryTimes, function (tryCallback) {\r\n                if (!self._isRunningTask(TaskId)) return;\r\n                util.fileSlice(FilePath, start, end, function (Body) {\r\n                    self.multipartUpload({\r\n                        TaskId: TaskId,\r\n                        Bucket: Bucket,\r\n                        Region: Region,\r\n                        Key: Key,\r\n                        ContentLength: ContentLength,\r\n                        PartNumber: PartNumber,\r\n                        UploadId: UploadData.UploadId,\r\n                        ServerSideEncryption: ServerSideEncryption,\r\n                        Body: Body,\r\n                        onProgress: params.onProgress,\r\n                        ContentMD5: contentMd5,\r\n                    }, function (err, data) {\r\n                        if (!self._isRunningTask(TaskId)) return;\r\n                        if (err) {\r\n                            return tryCallback(err);\r\n                        } else {\r\n                            PartItem.Uploaded = true;\r\n                            return tryCallback(null, data);\r\n                        }\r\n                    });\r\n                });\r\n            }, function (err, data) {\r\n                if (!self._isRunningTask(TaskId)) return;\r\n                return callback(err, data);\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\n// 完成分块上传\r\nfunction uploadSliceComplete(params, callback) {\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var UploadId = params.UploadId;\r\n    var SliceList = params.SliceList;\r\n    var self = this;\r\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\r\n    var Parts = SliceList.map(function (item) {\r\n        return {\r\n            PartNumber: item.PartNumber,\r\n            ETag: item.ETag\r\n        };\r\n    });\r\n    // 完成上传的请求也做重试\r\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\r\n        self.multipartComplete({\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            UploadId: UploadId,\r\n            Parts: Parts\r\n        }, tryCallback);\r\n    }, function (err, data) {\r\n        callback(err, data);\r\n    });\r\n}\r\n\r\n// 抛弃分块上传任务\r\n/*\r\n AsyncLimit (抛弃上传任务的并发量)，\r\n UploadId (上传任务的编号，当 Level 为 task 时候需要)\r\n Level (抛弃分块上传任务的级别，task : 抛弃指定的上传任务，file ： 抛弃指定的文件对应的上传任务，其他值 ：抛弃指定Bucket 的全部上传任务)\r\n */\r\nfunction abortUploadTask(params, callback) {\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var UploadId = params.UploadId;\r\n    var Level = params.Level || 'task';\r\n    var AsyncLimit = params.AsyncLimit;\r\n    var self = this;\r\n\r\n    var ep = new EventProxy();\r\n\r\n    ep.on('error', function (errData) {\r\n        return callback(errData);\r\n    });\r\n\r\n    // 已经获取到需要抛弃的任务列表\r\n    ep.on('get_abort_array', function (AbortArray) {\r\n        abortUploadTaskArray.call(self, {\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            Headers: params.Headers,\r\n            AsyncLimit: AsyncLimit,\r\n            AbortArray: AbortArray\r\n        }, function (err, data) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            callback(null, data);\r\n        });\r\n    });\r\n\r\n    if (Level === 'bucket') {\r\n        // Bucket 级别的任务抛弃，抛弃该 Bucket 下的全部上传任务\r\n        wholeMultipartList.call(self, {\r\n            Bucket: Bucket,\r\n            Region: Region\r\n        }, function (err, data) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            ep.emit('get_abort_array', data.UploadList || []);\r\n        });\r\n    } else if (Level === 'file') {\r\n        // 文件级别的任务抛弃，抛弃该文件的全部上传任务\r\n        if (!Key) return callback({error: 'abort_upload_task_no_key'});\r\n        wholeMultipartList.call(self, {\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key\r\n        }, function (err, data) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            ep.emit('get_abort_array', data.UploadList || []);\r\n        });\r\n    } else if (Level === 'task') {\r\n        // 单个任务级别的任务抛弃，抛弃指定 UploadId 的上传任务\r\n        if (!UploadId) return callback({error: 'abort_upload_task_no_id'});\r\n        if (!Key) return callback({error: 'abort_upload_task_no_key'});\r\n        ep.emit('get_abort_array', [{\r\n            Key: Key,\r\n            UploadId: UploadId\r\n        }]);\r\n    } else {\r\n        return callback({error: 'abort_unknown_level'});\r\n    }\r\n}\r\n\r\n// 批量抛弃分块上传任务\r\nfunction abortUploadTaskArray(params, callback) {\r\n\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var AbortArray = params.AbortArray;\r\n    var AsyncLimit = params.AsyncLimit || 1;\r\n    var self = this;\r\n\r\n    var index = 0;\r\n    var resultList = new Array(AbortArray.length);\r\n    Async.eachLimit(AbortArray, AsyncLimit, function (AbortItem, callback) {\r\n        var eachIndex = index;\r\n        if (Key && Key !== AbortItem.Key) {\r\n            resultList[eachIndex] = {error: {KeyNotMatch: true}};\r\n            callback(null);\r\n            return;\r\n        }\r\n        var UploadId = AbortItem.UploadId || AbortItem.UploadID;\r\n\r\n        self.multipartAbort({\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: AbortItem.Key,\r\n            Headers: params.Headers,\r\n            UploadId: UploadId\r\n        }, function (err, data) {\r\n            var task = {\r\n                Bucket: Bucket,\r\n                Region: Region,\r\n                Key: AbortItem.Key,\r\n                UploadId: UploadId\r\n            };\r\n            resultList[eachIndex] = {error: err, task: task};\r\n            callback(null);\r\n        });\r\n        index++;\r\n\r\n    }, function (err) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n\r\n        var successList = [];\r\n        var errorList = [];\r\n\r\n        for (var i = 0, len = resultList.length; i < len; i++) {\r\n            var item = resultList[i];\r\n            if (item['task']) {\r\n                if (item['error']) {\r\n                    errorList.push(item['task']);\r\n                } else {\r\n                    successList.push(item['task']);\r\n                }\r\n            }\r\n        }\r\n\r\n        return callback(null, {\r\n            successList: successList,\r\n            errorList: errorList\r\n        });\r\n    });\r\n}\r\n\r\n\r\n// 批量上传文件\r\nfunction uploadFiles(params, callback) {\r\n    var self = this;\r\n\r\n    // 判断多大的文件使用分片上传\r\n    var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;\r\n\r\n    // 汇总返回进度\r\n    var TotalSize = 0;\r\n    var TotalFinish = 0;\r\n    var onTotalProgress = util.throttleOnProgress.call(self, TotalFinish, params.onProgress);\r\n\r\n    // 汇总返回回调\r\n    var unFinishCount = params.files.length;\r\n    var _onTotalFileFinish = params.onFileFinish;\r\n    var resultList = Array(unFinishCount);\r\n    var onTotalFileFinish = function (err, data, options) {\r\n        onTotalProgress(null, true);\r\n        _onTotalFileFinish && _onTotalFileFinish(err, data, options);\r\n        resultList[options.Index] = {\r\n            options: options,\r\n            error: err,\r\n            data: data\r\n        };\r\n        if (--unFinishCount <= 0 && callback) {\r\n            callback(null, {\r\n                files: resultList,\r\n            });\r\n        }\r\n    };\r\n\r\n    // 开始处理每个文件\r\n    var taskList = [];\r\n    var count = params.files.length;\r\n    util.each(params.files, function (fileParams, index) {\r\n        fs.stat(fileParams.FilePath, function (err, stat) {\r\n\r\n            var FileSize = fileParams.ContentLength = stat.size || 0;\r\n            var fileInfo = {Index: index, TaskId: ''};\r\n\r\n            // 更新文件总大小\r\n            TotalSize += FileSize;\r\n\r\n            // 整理 option，用于返回给回调\r\n            util.each(fileParams, function (v, k) {\r\n                if (typeof v !== 'object' && typeof v !== 'function') {\r\n                    fileInfo[k] = v;\r\n                }\r\n            });\r\n\r\n            // 处理单个文件 TaskReady\r\n            var _onTaskReady = fileParams.onTaskReady;\r\n            var onTaskReady = function (tid) {\r\n                fileInfo.TaskId = tid;\r\n                _onTaskReady && _onTaskReady(tid);\r\n            };\r\n            fileParams.onTaskReady = onTaskReady;\r\n\r\n            // 处理单个文件进度\r\n            var PreAddSize = 0;\r\n            var _onProgress = fileParams.onProgress;\r\n            var onProgress = function (info) {\r\n                TotalFinish = TotalFinish - PreAddSize + info.loaded;\r\n                PreAddSize = info.loaded;\r\n                _onProgress && _onProgress(info);\r\n                onTotalProgress({loaded: TotalFinish, total: TotalSize});\r\n            };\r\n            fileParams.onProgress = onProgress;\r\n\r\n            // 处理单个文件完成\r\n            var _onFileFinish = fileParams.onFileFinish;\r\n            var onFileFinish = function (err, data) {\r\n                _onFileFinish && _onFileFinish(err, data);\r\n                onTotalFileFinish && onTotalFileFinish(err, data, fileInfo);\r\n            };\r\n\r\n            // 添加上传任务\r\n            var api = FileSize >= SliceSize ? 'sliceUploadFile' : 'putObject';\r\n            if (api === 'putObject') {\r\n                fileParams.Body = fs.createReadStream(fileParams.FilePath);\r\n                fileParams.Body.isSdkCreated = true;\r\n            }\r\n            taskList.push({\r\n                api: api,\r\n                params: fileParams,\r\n                callback: onFileFinish,\r\n            });\r\n            --count === 0 && self._addTasks(taskList);\r\n        });\r\n    });\r\n}\r\n\r\n// 分片复制文件\r\nfunction sliceCopyFile(params, callback) {\r\n    var ep = new EventProxy();\r\n\r\n    var self = this;\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var CopySource = params.CopySource;\r\n    var m = CopySource.match(/^([^.]+-\\d+)\\.cos(v6)?\\.([^.]+)\\.[^/]+\\/(.+)$/);\r\n    if (!m) {\r\n        callback({error: 'CopySource format error'});\r\n        return;\r\n    }\r\n\r\n    var SourceBucket = m[1];\r\n    var SourceRegion = m[3];\r\n    var SourceKey = decodeURIComponent(m[4]);\r\n    var CopySliceSize = params.CopySliceSize === undefined ? self.options.CopySliceSize : params.CopySliceSize;\r\n    CopySliceSize = Math.max(0, CopySliceSize);\r\n\r\n    var ChunkSize = params.CopyChunkSize || this.options.CopyChunkSize;\r\n    var ChunkParallel = this.options.CopyChunkParallelLimit;\r\n\r\n    var FinishSize = 0;\r\n    var FileSize;\r\n    var onProgress;\r\n\r\n    // 分片复制完成，开始 multipartComplete 操作\r\n    ep.on('copy_slice_complete', function (UploadData) {\r\n        self.multipartComplete({\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            UploadId: UploadData.UploadId,\r\n            Parts: UploadData.PartList,\r\n        },function (err, data) {\r\n            if (err) {\r\n                onProgress(null, true);\r\n                return callback(err);\r\n            }\r\n            onProgress({loaded: FileSize, total: FileSize}, true);\r\n            callback(null, data);\r\n        });\r\n    });\r\n\r\n    ep.on('get_copy_data_finish',function (UploadData) {\r\n        Async.eachLimit(UploadData.PartList, ChunkParallel, function (SliceItem, asyncCallback) {\r\n            var PartNumber = SliceItem.PartNumber;\r\n            var CopySourceRange = SliceItem.CopySourceRange;\r\n            var currentSize = SliceItem.end - SliceItem.start;\r\n            var preAddSize = 0;\r\n\r\n            copySliceItem.call(self, {\r\n                Bucket: Bucket,\r\n                Region: Region,\r\n                Key: Key,\r\n                CopySource: CopySource,\r\n                UploadId: UploadData.UploadId,\r\n                PartNumber: PartNumber,\r\n                CopySourceRange: CopySourceRange,\r\n                onProgress: function (data) {\r\n                    FinishSize += data.loaded - preAddSize;\r\n                    preAddSize = data.loaded;\r\n                    onProgress({loaded: FinishSize, total: FileSize});\r\n                }\r\n            },function (err,data) {\r\n                if (err) {\r\n                    return asyncCallback(err);\r\n                }\r\n                onProgress({loaded: FinishSize, total: FileSize});\r\n\r\n                FinishSize += currentSize - preAddSize;\r\n                SliceItem.ETag = data.ETag;\r\n                asyncCallback(err || null, data);\r\n            });\r\n        }, function (err) {\r\n            if (err) {\r\n                onProgress(null, true);\r\n                return callback(err);\r\n            }\r\n\r\n            ep.emit('copy_slice_complete', UploadData);\r\n        });\r\n    });\r\n\r\n    ep.on('get_file_size_finish', function (SourceHeaders) {\r\n        // 控制分片大小\r\n        (function () {\r\n            var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\r\n            var AutoChunkSize = 1024 * 1024;\r\n            for (var i = 0; i < SIZE.length; i++) {\r\n                AutoChunkSize = SIZE[i] * 1024 * 1024;\r\n                if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\r\n            }\r\n            params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\r\n\r\n            var ChunkCount = Math.ceil(FileSize / ChunkSize);\r\n\r\n            var list = [];\r\n            for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {\r\n                var start = (partNumber - 1) * ChunkSize;\r\n                var end = partNumber * ChunkSize < FileSize ? (partNumber * ChunkSize - 1) : FileSize - 1;\r\n                var item = {\r\n                    PartNumber: partNumber,\r\n                    start: start,\r\n                    end: end,\r\n                    CopySourceRange: \"bytes=\" + start + \"-\" + end,\r\n                };\r\n                list.push(item);\r\n            }\r\n            params.PartList = list;\r\n        })();\r\n\r\n        var TargetHeader;\r\n        if (params.Headers['x-cos-metadata-directive'] === 'Replaced') {\r\n            TargetHeader = params.Headers;\r\n        } else {\r\n            TargetHeader = SourceHeaders;\r\n        }\r\n        TargetHeader['x-cos-storage-class'] = params.Headers['x-cos-storage-class'] || SourceHeaders['x-cos-storage-class'];\r\n        TargetHeader = util.clearKey(TargetHeader);\r\n        /**\r\n         * 对于归档存储的对象，如果未恢复副本，则不允许 Copy\r\n         */\r\n        if (SourceHeaders['x-cos-storage-class'] === 'ARCHIVE') {\r\n            var restoreHeader = SourceHeaders['x-cos-restore'];\r\n            if (!restoreHeader || restoreHeader === 'ongoing-request=\"true\"') {\r\n                callback({ error: 'Unrestored archive object is not allowed to be copied' });\r\n                return;\r\n            }\r\n        }\r\n        /**\r\n         * 去除一些无用的头部，规避 multipartInit 出错\r\n         * 这些头部通常是在 putObjectCopy 时才使用\r\n         */\r\n        delete TargetHeader['x-cos-copy-source'];\r\n        delete TargetHeader['x-cos-metadata-directive'];\r\n        delete TargetHeader['x-cos-copy-source-If-Modified-Since'];\r\n        delete TargetHeader['x-cos-copy-source-If-Unmodified-Since'];\r\n        delete TargetHeader['x-cos-copy-source-If-Match'];\r\n        delete TargetHeader['x-cos-copy-source-If-None-Match'];\r\n        self.multipartInit({\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            Headers: TargetHeader,\r\n        },function (err,data) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            params.UploadId = data.UploadId;\r\n            ep.emit('get_copy_data_finish', params);\r\n        });\r\n    });\r\n\r\n    // 获取远端复制源文件的大小\r\n    self.headObject({\r\n        Bucket: SourceBucket,\r\n        Region: SourceRegion,\r\n        Key: SourceKey,\r\n    },function(err, data) {\r\n        if (err) {\r\n            if (err.statusCode && err.statusCode === 404) {\r\n                callback({ErrorStatus: SourceKey + ' Not Exist'});\r\n            } else {\r\n                callback(err);\r\n            }\r\n            return;\r\n        }\r\n\r\n        FileSize = params.FileSize = data.headers['content-length'];\r\n        if (FileSize === undefined || !FileSize) {\r\n            callback({error: 'get Content-Length error, please add \"Content-Length\" to CORS ExposeHeader setting.'});\r\n            return;\r\n        }\r\n\r\n        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\r\n\r\n        // 开始上传\r\n        if (FileSize <= CopySliceSize) {\r\n            if (!params.Headers['x-cos-metadata-directive']) {\r\n                params.Headers['x-cos-metadata-directive'] = 'Copy';\r\n            }\r\n            self.putObjectCopy(params, function (err, data) {\r\n                if (err) {\r\n                    onProgress(null, true);\r\n                    return callback(err);\r\n                }\r\n                onProgress({loaded: FileSize, total: FileSize}, true);\r\n                callback(err, data);\r\n            });\r\n        } else {\r\n            var resHeaders = data.headers;\r\n            var SourceHeaders = {\r\n                'Cache-Control': resHeaders['cache-control'],\r\n                'Content-Disposition': resHeaders['content-disposition'],\r\n                'Content-Encoding': resHeaders['content-encoding'],\r\n                'Content-Type': resHeaders['content-type'],\r\n                'Expires': resHeaders['expires'],\r\n                'x-cos-storage-class': resHeaders['x-cos-storage-class'],\r\n            };\r\n            util.each(resHeaders, function (v, k) {\r\n                var metaPrefix = 'x-cos-meta-';\r\n                if (k.indexOf(metaPrefix) === 0 && k.length > metaPrefix.length) {\r\n                    SourceHeaders[k] = v;\r\n                }\r\n            });\r\n            ep.emit('get_file_size_finish', SourceHeaders);\r\n        }\r\n    });\r\n}\r\n\r\n// 复制指定分片\r\nfunction copySliceItem(params, callback) {\r\n    var TaskId = params.TaskId;\r\n    var Bucket = params.Bucket;\r\n    var Region = params.Region;\r\n    var Key = params.Key;\r\n    var CopySource = params.CopySource;\r\n    var UploadId = params.UploadId;\r\n    var PartNumber = params.PartNumber * 1;\r\n    var CopySourceRange = params.CopySourceRange;\r\n\r\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\r\n    var self = this;\r\n\r\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\r\n        self.uploadPartCopy({\r\n            TaskId: TaskId,\r\n            Bucket: Bucket,\r\n            Region: Region,\r\n            Key: Key,\r\n            CopySource: CopySource,\r\n            UploadId: UploadId,\r\n            PartNumber:PartNumber,\r\n            CopySourceRange:CopySourceRange,\r\n            onProgress:params.onProgress,\r\n        },function (err,data) {\r\n            tryCallback(err || null, data);\r\n        })\r\n    }, function (err, data) {\r\n        return callback(err, data);\r\n    });\r\n}\r\n\r\n\r\nvar API_MAP = {\r\n    sliceUploadFile: sliceUploadFile,\r\n    abortUploadTask: abortUploadTask,\r\n    uploadFiles: uploadFiles,\r\n    sliceCopyFile: sliceCopyFile,\r\n};\r\n\r\nmodule.exports.init = function (COS, task) {\r\n    task.transferToTaskMethod(API_MAP, 'sliceUploadFile');\r\n    util.each(API_MAP, function (fn, apiName) {\r\n        COS.prototype[apiName] = util.apiWrapper(apiName, fn);\r\n    });\r\n};\r\n","var eachLimit = function (arr, limit, iterator, callback) {\r\n    callback = callback || function () {};\r\n    if (!arr.length || limit <= 0) {\r\n        return callback();\r\n    }\r\n\r\n    var completed = 0;\r\n    var started = 0;\r\n    var running = 0;\r\n\r\n    (function replenish () {\r\n        if (completed >= arr.length) {\r\n            return callback();\r\n        }\r\n\r\n        while (running < limit && started < arr.length) {\r\n            started += 1;\r\n            running += 1;\r\n            iterator(arr[started - 1], function (err) {\r\n\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                } else {\r\n                    completed += 1;\r\n                    running -= 1;\r\n                    if (completed >= arr.length) {\r\n                        callback();\r\n                    } else {\r\n                        replenish();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    })();\r\n};\r\n\r\nvar retry = function (times, iterator, callback) {\r\n    var next = function (index) {\r\n        iterator(function (err, data) {\r\n            if (err && index < times) {\r\n                next(index + 1);\r\n            } else {\r\n                callback(err, data);\r\n            }\r\n        });\r\n    };\r\n    if (times < 1) {\r\n        callback();\r\n    } else {\r\n        next(1);\r\n    }\r\n};\r\n\r\nvar async = {\r\n    eachLimit: eachLimit,\r\n    retry: retry\r\n};\r\n\r\nmodule.exports = async;"]}